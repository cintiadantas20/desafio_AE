{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.6", "generated_at": "2023-07-06T01:16:43.303782Z", "invocation_id": "d641875d-e88f-4b2a-a7be-459a277f0f37", "env": {}, "project_id": "94306d9db4e1392fffbcf350782eb770", "user_id": "fdcc963c-d91e-49aa-baab-ea54242df7d5", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.desafioaeadw.department": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "department", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/human_resources/department.csv", "original_file_path": "seeds/sap_adventure_works/human_resources/department.csv", "unique_id": "seed.desafioaeadw.department", "fqn": ["desafioaeadw", "sap_adventure_works", "human_resources", "department"], "alias": "department", "checksum": {"name": "sha256", "checksum": "eaa1875ef832e2a82c7523bf9b72f768adabbad65e44abdd1238bdbaa4e19abc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.0974524, "relation_name": "`desafioaeadw`.`dbt_cintia`.`department`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.employee": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "employee", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/human_resources/employee.csv", "original_file_path": "seeds/sap_adventure_works/human_resources/employee.csv", "unique_id": "seed.desafioaeadw.employee", "fqn": ["desafioaeadw", "sap_adventure_works", "human_resources", "employee"], "alias": "employee", "checksum": {"name": "sha256", "checksum": "03a3598a153540ea0b0c4aeb35f554336d4957e511c3282ae34616403c731966"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1078353, "relation_name": "`desafioaeadw`.`dbt_cintia`.`employee`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.employeedepartmenthistory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "employeedepartmenthistory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/human_resources/employeedepartmenthistory.csv", "original_file_path": "seeds/sap_adventure_works/human_resources/employeedepartmenthistory.csv", "unique_id": "seed.desafioaeadw.employeedepartmenthistory", "fqn": ["desafioaeadw", "sap_adventure_works", "human_resources", "employeedepartmenthistory"], "alias": "employeedepartmenthistory", "checksum": {"name": "sha256", "checksum": "49e72d10ace89b44b276e9d4ea24fa18407db7f14a8a08cf2dfe06c5886d27d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1188102, "relation_name": "`desafioaeadw`.`dbt_cintia`.`employeedepartmenthistory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.employeepayhistory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "employeepayhistory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/human_resources/employeepayhistory.csv", "original_file_path": "seeds/sap_adventure_works/human_resources/employeepayhistory.csv", "unique_id": "seed.desafioaeadw.employeepayhistory", "fqn": ["desafioaeadw", "sap_adventure_works", "human_resources", "employeepayhistory"], "alias": "employeepayhistory", "checksum": {"name": "sha256", "checksum": "4648dee4352e6c01df8ff94f5908c8709d066c0781ec92ca25d14e87e7a3efdb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.128575, "relation_name": "`desafioaeadw`.`dbt_cintia`.`employeepayhistory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.jobcandidate": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "jobcandidate", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/human_resources/jobcandidate.csv", "original_file_path": "seeds/sap_adventure_works/human_resources/jobcandidate.csv", "unique_id": "seed.desafioaeadw.jobcandidate", "fqn": ["desafioaeadw", "sap_adventure_works", "human_resources", "jobcandidate"], "alias": "jobcandidate", "checksum": {"name": "sha256", "checksum": "b956cd176041cb6e3eaf0680f3bd1888e131433a6c23d85aa530580e6331a356"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1359546, "relation_name": "`desafioaeadw`.`dbt_cintia`.`jobcandidate`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.shift": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "shift", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/human_resources/shift.csv", "original_file_path": "seeds/sap_adventure_works/human_resources/shift.csv", "unique_id": "seed.desafioaeadw.shift", "fqn": ["desafioaeadw", "sap_adventure_works", "human_resources", "shift"], "alias": "shift", "checksum": {"name": "sha256", "checksum": "ee1e16ae4d537d7e31908836ec565bcc6332fb690bc19db90f3b894ce0c47f21"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1461673, "relation_name": "`desafioaeadw`.`dbt_cintia`.`shift`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.address": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "address", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/address.csv", "original_file_path": "seeds/sap_adventure_works/person/address.csv", "unique_id": "seed.desafioaeadw.address", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "address"], "alias": "address", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/person/address.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1506896, "relation_name": "`desafioaeadw`.`dbt_cintia`.`address`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.addresstype": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "addresstype", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/addresstype.csv", "original_file_path": "seeds/sap_adventure_works/person/addresstype.csv", "unique_id": "seed.desafioaeadw.addresstype", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "addresstype"], "alias": "addresstype", "checksum": {"name": "sha256", "checksum": "1c18498bfe173903161160302c2dc9138abfa2eafdea3e0c862aaefd60dbc708"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1622722, "relation_name": "`desafioaeadw`.`dbt_cintia`.`addresstype`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.businessentity": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "businessentity", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/businessentity.csv", "original_file_path": "seeds/sap_adventure_works/person/businessentity.csv", "unique_id": "seed.desafioaeadw.businessentity", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "businessentity"], "alias": "businessentity", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/person/businessentity.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1730645, "relation_name": "`desafioaeadw`.`dbt_cintia`.`businessentity`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.businessentityaddress": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "businessentityaddress", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/businessentityaddress.csv", "original_file_path": "seeds/sap_adventure_works/person/businessentityaddress.csv", "unique_id": "seed.desafioaeadw.businessentityaddress", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "businessentityaddress"], "alias": "businessentityaddress", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/person/businessentityaddress.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1860423, "relation_name": "`desafioaeadw`.`dbt_cintia`.`businessentityaddress`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.businessentitycontact": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "businessentitycontact", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/businessentitycontact.csv", "original_file_path": "seeds/sap_adventure_works/person/businessentitycontact.csv", "unique_id": "seed.desafioaeadw.businessentitycontact", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "businessentitycontact"], "alias": "businessentitycontact", "checksum": {"name": "sha256", "checksum": "a2776812e3edca32a183aad3d4740860a6433718c26885472874e859a692d3a0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.1931329, "relation_name": "`desafioaeadw`.`dbt_cintia`.`businessentitycontact`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.contacttype": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "contacttype", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/contacttype.csv", "original_file_path": "seeds/sap_adventure_works/person/contacttype.csv", "unique_id": "seed.desafioaeadw.contacttype", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "contacttype"], "alias": "contacttype", "checksum": {"name": "sha256", "checksum": "90dfcee4777b8e509721bf6db9ddbba1d1a1f55e9d2d60ef8eec9bb1de06efe0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.2023156, "relation_name": "`desafioaeadw`.`dbt_cintia`.`contacttype`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.countryregion": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "countryregion", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/countryregion.csv", "original_file_path": "seeds/sap_adventure_works/person/countryregion.csv", "unique_id": "seed.desafioaeadw.countryregion", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "countryregion"], "alias": "countryregion", "checksum": {"name": "sha256", "checksum": "6095d5925b86c32e00bfb2d78b543ff6392b7e2e35c14bf4c894607e1bd5f964"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.2124116, "relation_name": "`desafioaeadw`.`dbt_cintia`.`countryregion`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.emailaddress": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "emailaddress", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/emailaddress.csv", "original_file_path": "seeds/sap_adventure_works/person/emailaddress.csv", "unique_id": "seed.desafioaeadw.emailaddress", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "emailaddress"], "alias": "emailaddress", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/person/emailaddress.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.2193034, "relation_name": "`desafioaeadw`.`dbt_cintia`.`emailaddress`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.person": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "person", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/person.csv", "original_file_path": "seeds/sap_adventure_works/person/person.csv", "unique_id": "seed.desafioaeadw.person", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "person"], "alias": "person", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/person/person.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.2295704, "relation_name": "`desafioaeadw`.`dbt_cintia`.`person`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.personphone": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "personphone", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/personphone.csv", "original_file_path": "seeds/sap_adventure_works/person/personphone.csv", "unique_id": "seed.desafioaeadw.personphone", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "personphone"], "alias": "personphone", "checksum": {"name": "sha256", "checksum": "d033cf18b126c0a6168790ae1e80ad4a6584a6cc9bc52f83efb3adfedf8e963e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.237695, "relation_name": "`desafioaeadw`.`dbt_cintia`.`personphone`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.phonenumbertype": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "phonenumbertype", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/phonenumbertype.csv", "original_file_path": "seeds/sap_adventure_works/person/phonenumbertype.csv", "unique_id": "seed.desafioaeadw.phonenumbertype", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "phonenumbertype"], "alias": "phonenumbertype", "checksum": {"name": "sha256", "checksum": "d8b2eed32d4ce37841245069eb82334b5d05622b9535b6f23465e7bcdd43b747"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.2493, "relation_name": "`desafioaeadw`.`dbt_cintia`.`phonenumbertype`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.stateprovince": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "stateprovince", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/person/stateprovince.csv", "original_file_path": "seeds/sap_adventure_works/person/stateprovince.csv", "unique_id": "seed.desafioaeadw.stateprovince", "fqn": ["desafioaeadw", "sap_adventure_works", "person", "stateprovince"], "alias": "stateprovince", "checksum": {"name": "sha256", "checksum": "6812ef09853ae5a0ebcb471f8cc23f44b8e2ea9f7373c61f0ad08a63b5d851bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.2558517, "relation_name": "`desafioaeadw`.`dbt_cintia`.`stateprovince`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.billofmaterials": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "billofmaterials", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/billofmaterials.csv", "original_file_path": "seeds/sap_adventure_works/production/billofmaterials.csv", "unique_id": "seed.desafioaeadw.billofmaterials", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "billofmaterials"], "alias": "billofmaterials", "checksum": {"name": "sha256", "checksum": "ae09a8f23072387e63c96cf03dfef901b4bb1798122eb710338898c275f4f3f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"perassemblyqty": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://seeds/sap_adventure_works/seed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "column_types": {"perassemblyqty": "numeric"}}, "created_at": 1687786478.7867799, "relation_name": "`desafioaeadw`.`dbt_cintia`.`billofmaterials`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.culture": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "culture", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/culture.csv", "original_file_path": "seeds/sap_adventure_works/production/culture.csv", "unique_id": "seed.desafioaeadw.culture", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "culture"], "alias": "culture", "checksum": {"name": "sha256", "checksum": "2742ee3271a1d83e0b90e9ec55b8714b30b92a28e2b8546bbf26051a7269d45b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.278957, "relation_name": "`desafioaeadw`.`dbt_cintia`.`culture`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.illustration": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "illustration", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/illustration.csv", "original_file_path": "seeds/sap_adventure_works/production/illustration.csv", "unique_id": "seed.desafioaeadw.illustration", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "illustration"], "alias": "illustration", "checksum": {"name": "sha256", "checksum": "3f43b9c8cc078c51d13e3e8d369e82bae04ba7a069bd13da8b7fbf386176c9e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.286126, "relation_name": "`desafioaeadw`.`dbt_cintia`.`illustration`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.location": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "location", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/location.csv", "original_file_path": "seeds/sap_adventure_works/production/location.csv", "unique_id": "seed.desafioaeadw.location", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "location"], "alias": "location", "checksum": {"name": "sha256", "checksum": "29ba4359bc99ae0ef91e980529da9a6c27f668dfb2158bafad7069c807f91791"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"availability": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://seeds/sap_adventure_works/seed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "column_types": {"availability": "numeric"}}, "created_at": 1687786478.8010054, "relation_name": "`desafioaeadw`.`dbt_cintia`.`location`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.product": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "product", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/product.csv", "original_file_path": "seeds/sap_adventure_works/production/product.csv", "unique_id": "seed.desafioaeadw.product", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "product"], "alias": "product", "checksum": {"name": "sha256", "checksum": "a926851b124bc604848048a8728641698563743c26a16913ae121605b41234c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.2972684, "relation_name": "`desafioaeadw`.`dbt_cintia`.`product`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productcategory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productcategory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productcategory.csv", "original_file_path": "seeds/sap_adventure_works/production/productcategory.csv", "unique_id": "seed.desafioaeadw.productcategory", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productcategory"], "alias": "productcategory", "checksum": {"name": "sha256", "checksum": "715993a9c2486aaac87ef1b847975746a5533a88c33017ec43261e1e500a4f5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3084517, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productcategory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productcosthistory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productcosthistory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productcosthistory.csv", "original_file_path": "seeds/sap_adventure_works/production/productcosthistory.csv", "unique_id": "seed.desafioaeadw.productcosthistory", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productcosthistory"], "alias": "productcosthistory", "checksum": {"name": "sha256", "checksum": "bc5da1cb081fb603776a0c3637353612b4a7a3ef3cb2265cd5b9b4152f2179e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3180642, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productcosthistory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productdescription": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productdescription", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productdescription.csv", "original_file_path": "seeds/sap_adventure_works/production/productdescription.csv", "unique_id": "seed.desafioaeadw.productdescription", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productdescription"], "alias": "productdescription", "checksum": {"name": "sha256", "checksum": "cadbacbb263524efc0b5a380a93cd97acdec5bdfaab950c5d9458fd8fa1539c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3231885, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productdescription`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productdocument": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productdocument", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productdocument.csv", "original_file_path": "seeds/sap_adventure_works/production/productdocument.csv", "unique_id": "seed.desafioaeadw.productdocument", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productdocument"], "alias": "productdocument", "checksum": {"name": "sha256", "checksum": "6449b4ba7716494c03a8403931156254d2dc81a28c5bb55528dd8c6d07191407"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.333451, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productdocument`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productinventory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productinventory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productinventory.csv", "original_file_path": "seeds/sap_adventure_works/production/productinventory.csv", "unique_id": "seed.desafioaeadw.productinventory", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productinventory"], "alias": "productinventory", "checksum": {"name": "sha256", "checksum": "8ffd494370589a24420d1fc325b2a82d628600c969c9da4f3dc0cb8d18012d4a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3378994, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productinventory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productlistpricehistory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productlistpricehistory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productlistpricehistory.csv", "original_file_path": "seeds/sap_adventure_works/production/productlistpricehistory.csv", "unique_id": "seed.desafioaeadw.productlistpricehistory", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productlistpricehistory"], "alias": "productlistpricehistory", "checksum": {"name": "sha256", "checksum": "a81234a392158d7d6fc8f897ae589522267a794320c3eacf1663f2cdfc7df3e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.347585, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productlistpricehistory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productmodel": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productmodel", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productmodel.csv", "original_file_path": "seeds/sap_adventure_works/production/productmodel.csv", "unique_id": "seed.desafioaeadw.productmodel", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productmodel"], "alias": "productmodel", "checksum": {"name": "sha256", "checksum": "149653b9c42894a5e9eef3843097cd477eb5a17e441baee8d09c76997982b1fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.353211, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productmodel`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productmodelillustration": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productmodelillustration", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productmodelillustration.csv", "original_file_path": "seeds/sap_adventure_works/production/productmodelillustration.csv", "unique_id": "seed.desafioaeadw.productmodelillustration", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productmodelillustration"], "alias": "productmodelillustration", "checksum": {"name": "sha256", "checksum": "763b14de98f52b535366023e4678ee5a4e1f88fc68769d8042ce433aab798f62"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3591204, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productmodelillustration`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productmodelproductdescriptionculture": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productmodelproductdescriptionculture", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productmodelproductdescriptionculture.csv", "original_file_path": "seeds/sap_adventure_works/production/productmodelproductdescriptionculture.csv", "unique_id": "seed.desafioaeadw.productmodelproductdescriptionculture", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productmodelproductdescriptionculture"], "alias": "productmodelproductdescriptionculture", "checksum": {"name": "sha256", "checksum": "308eb39c78d5ac01abaebc3c8a9010b9f97f6a0287e626f59ad5c47280c1eb9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3669019, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productmodelproductdescriptionculture`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productproductphoto": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productproductphoto", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productproductphoto.csv", "original_file_path": "seeds/sap_adventure_works/production/productproductphoto.csv", "unique_id": "seed.desafioaeadw.productproductphoto", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productproductphoto"], "alias": "productproductphoto", "checksum": {"name": "sha256", "checksum": "786c1598ffc4883bb071ebcafa982e2e93facaa75b9e76091db9f6ac897c36c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3716278, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productproductphoto`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productsubcategory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productsubcategory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/productsubcategory.csv", "original_file_path": "seeds/sap_adventure_works/production/productsubcategory.csv", "unique_id": "seed.desafioaeadw.productsubcategory", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "productsubcategory"], "alias": "productsubcategory", "checksum": {"name": "sha256", "checksum": "ed609593264d0aa65d57319a0d51198999d9dfaf6c2a003310201f2332afb6d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3834846, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productsubcategory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.scrapreason": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "scrapreason", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/scrapreason.csv", "original_file_path": "seeds/sap_adventure_works/production/scrapreason.csv", "unique_id": "seed.desafioaeadw.scrapreason", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "scrapreason"], "alias": "scrapreason", "checksum": {"name": "sha256", "checksum": "05263b79fa48e1bdb310195bc3ac19fb75189505b06b1f10cc212648bbb9552b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.3956475, "relation_name": "`desafioaeadw`.`dbt_cintia`.`scrapreason`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.transactionhistory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "transactionhistory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/transactionhistory.csv", "original_file_path": "seeds/sap_adventure_works/production/transactionhistory.csv", "unique_id": "seed.desafioaeadw.transactionhistory", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "transactionhistory"], "alias": "transactionhistory", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/production/transactionhistory.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4019327, "relation_name": "`desafioaeadw`.`dbt_cintia`.`transactionhistory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.transactionhistoryarchive": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "transactionhistoryarchive", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/transactionhistoryarchive.csv", "original_file_path": "seeds/sap_adventure_works/production/transactionhistoryarchive.csv", "unique_id": "seed.desafioaeadw.transactionhistoryarchive", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "transactionhistoryarchive"], "alias": "transactionhistoryarchive", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/production/transactionhistoryarchive.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4061542, "relation_name": "`desafioaeadw`.`dbt_cintia`.`transactionhistoryarchive`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.unitmeasure": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "unitmeasure", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/unitmeasure.csv", "original_file_path": "seeds/sap_adventure_works/production/unitmeasure.csv", "unique_id": "seed.desafioaeadw.unitmeasure", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "unitmeasure"], "alias": "unitmeasure", "checksum": {"name": "sha256", "checksum": "16a25743cf1aeed3114b19b07d305eb5cf5ea789f81920f48c5721e3505d3876"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4149854, "relation_name": "`desafioaeadw`.`dbt_cintia`.`unitmeasure`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.workorder": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "workorder", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/workorder.csv", "original_file_path": "seeds/sap_adventure_works/production/workorder.csv", "unique_id": "seed.desafioaeadw.workorder", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "workorder"], "alias": "workorder", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/production/workorder.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.419282, "relation_name": "`desafioaeadw`.`dbt_cintia`.`workorder`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.workorderrouting": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "workorderrouting", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/production/workorderrouting.csv", "original_file_path": "seeds/sap_adventure_works/production/workorderrouting.csv", "unique_id": "seed.desafioaeadw.workorderrouting", "fqn": ["desafioaeadw", "sap_adventure_works", "production", "workorderrouting"], "alias": "workorderrouting", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/production/workorderrouting.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4236467, "relation_name": "`desafioaeadw`.`dbt_cintia`.`workorderrouting`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.productvendor": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productvendor", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/purchasing/productvendor.csv", "original_file_path": "seeds/sap_adventure_works/purchasing/productvendor.csv", "unique_id": "seed.desafioaeadw.productvendor", "fqn": ["desafioaeadw", "sap_adventure_works", "purchasing", "productvendor"], "alias": "productvendor", "checksum": {"name": "sha256", "checksum": "84629d9e5250bbe1341ad920f555c4c1774e9bd557e78b6770432cb131938d5e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4357998, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productvendor`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.purchaseorderdetail": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "purchaseorderdetail", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/purchasing/purchaseorderdetail.csv", "original_file_path": "seeds/sap_adventure_works/purchasing/purchaseorderdetail.csv", "unique_id": "seed.desafioaeadw.purchaseorderdetail", "fqn": ["desafioaeadw", "sap_adventure_works", "purchasing", "purchaseorderdetail"], "alias": "purchaseorderdetail", "checksum": {"name": "sha256", "checksum": "99d16637a589e1198e2138433a233c3b45e1d00928c650cf452d731d2e982698"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"rejectedqty": "numeric", "receivedqty": "numeric"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": true, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://seeds/sap_adventure_works/seed_schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": true, "column_types": {"rejectedqty": "numeric", "receivedqty": "numeric"}}, "created_at": 1687786478.80554, "relation_name": "`desafioaeadw`.`dbt_cintia`.`purchaseorderdetail`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.purchaseorderheader": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "purchaseorderheader", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/purchasing/purchaseorderheader.csv", "original_file_path": "seeds/sap_adventure_works/purchasing/purchaseorderheader.csv", "unique_id": "seed.desafioaeadw.purchaseorderheader", "fqn": ["desafioaeadw", "sap_adventure_works", "purchasing", "purchaseorderheader"], "alias": "purchaseorderheader", "checksum": {"name": "sha256", "checksum": "b58dfa5c3298d730fbeaafb3348ce2f7e692172a2a359d7eabfe16f6fd65c3b3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4515936, "relation_name": "`desafioaeadw`.`dbt_cintia`.`purchaseorderheader`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.shipmethod": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "shipmethod", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/purchasing/shipmethod.csv", "original_file_path": "seeds/sap_adventure_works/purchasing/shipmethod.csv", "unique_id": "seed.desafioaeadw.shipmethod", "fqn": ["desafioaeadw", "sap_adventure_works", "purchasing", "shipmethod"], "alias": "shipmethod", "checksum": {"name": "sha256", "checksum": "c3201fe627935f7cce44d799cb784a8bb4cd126ebef254a18f6f1166af39be08"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4558778, "relation_name": "`desafioaeadw`.`dbt_cintia`.`shipmethod`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.vendor": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "vendor", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/purchasing/vendor.csv", "original_file_path": "seeds/sap_adventure_works/purchasing/vendor.csv", "unique_id": "seed.desafioaeadw.vendor", "fqn": ["desafioaeadw", "sap_adventure_works", "purchasing", "vendor"], "alias": "vendor", "checksum": {"name": "sha256", "checksum": "313c8c7bfd60369a591687817ea80fa64d56a6ed105f75ec7cf1b3486f2cf514"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4687736, "relation_name": "`desafioaeadw`.`dbt_cintia`.`vendor`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.countryregioncurrency": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "countryregioncurrency", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/countryregioncurrency.csv", "original_file_path": "seeds/sap_adventure_works/sales/countryregioncurrency.csv", "unique_id": "seed.desafioaeadw.countryregioncurrency", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "countryregioncurrency"], "alias": "countryregioncurrency", "checksum": {"name": "sha256", "checksum": "29d33884145b4285b58e679325bb175d3d2af5cd6659a31a543b750c6ffd1217"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4730551, "relation_name": "`desafioaeadw`.`dbt_cintia`.`countryregioncurrency`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.creditcard": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "creditcard", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/creditcard.csv", "original_file_path": "seeds/sap_adventure_works/sales/creditcard.csv", "unique_id": "seed.desafioaeadw.creditcard", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "creditcard"], "alias": "creditcard", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/sales/creditcard.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4835517, "relation_name": "`desafioaeadw`.`dbt_cintia`.`creditcard`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.currency": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "currency", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/currency.csv", "original_file_path": "seeds/sap_adventure_works/sales/currency.csv", "unique_id": "seed.desafioaeadw.currency", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "currency"], "alias": "currency", "checksum": {"name": "sha256", "checksum": "56f09fd8f3e0caa3fa04867d25feeb7b0938a38267cc837f694023e5e1b144c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.488052, "relation_name": "`desafioaeadw`.`dbt_cintia`.`currency`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.currencyrate": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "currencyrate", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/currencyrate.csv", "original_file_path": "seeds/sap_adventure_works/sales/currencyrate.csv", "unique_id": "seed.desafioaeadw.currencyrate", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "currencyrate"], "alias": "currencyrate", "checksum": {"name": "sha256", "checksum": "d9776ebd680fb0ac9f470e60c08844da2cb0a498ca9368f8c148b9857a7b78d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.4971764, "relation_name": "`desafioaeadw`.`dbt_cintia`.`currencyrate`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.customer": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "customer", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/customer.csv", "original_file_path": "seeds/sap_adventure_works/sales/customer.csv", "unique_id": "seed.desafioaeadw.customer", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "customer"], "alias": "customer", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/sales/customer.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5038452, "relation_name": "`desafioaeadw`.`dbt_cintia`.`customer`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.personcreditcard": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "personcreditcard", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/personcreditcard.csv", "original_file_path": "seeds/sap_adventure_works/sales/personcreditcard.csv", "unique_id": "seed.desafioaeadw.personcreditcard", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "personcreditcard"], "alias": "personcreditcard", "checksum": {"name": "sha256", "checksum": "c0f8c605916bed4e16cbc8690d8bb3c12e6feef8ff8ae209dfd7a700e16e1c1e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5104403, "relation_name": "`desafioaeadw`.`dbt_cintia`.`personcreditcard`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salesorderdetail": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesorderdetail", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salesorderdetail.csv", "original_file_path": "seeds/sap_adventure_works/sales/salesorderdetail.csv", "unique_id": "seed.desafioaeadw.salesorderdetail", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salesorderdetail"], "alias": "salesorderdetail", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/sales/salesorderdetail.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.519673, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesorderdetail`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salesorderheader": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesorderheader", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salesorderheader.csv", "original_file_path": "seeds/sap_adventure_works/sales/salesorderheader.csv", "unique_id": "seed.desafioaeadw.salesorderheader", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salesorderheader"], "alias": "salesorderheader", "checksum": {"name": "path", "checksum": "seeds/sap_adventure_works/sales/salesorderheader.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5267346, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesorderheader`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salesorderheadersalesreason": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesorderheadersalesreason", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salesorderheadersalesreason.csv", "original_file_path": "seeds/sap_adventure_works/sales/salesorderheadersalesreason.csv", "unique_id": "seed.desafioaeadw.salesorderheadersalesreason", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salesorderheadersalesreason"], "alias": "salesorderheadersalesreason", "checksum": {"name": "sha256", "checksum": "c7187e6777b4e300dcbf6a596f58f0e99e67cd0f365cbc694ec61e7835fcf097"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5364664, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesorderheadersalesreason`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salesperson": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesperson", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salesperson.csv", "original_file_path": "seeds/sap_adventure_works/sales/salesperson.csv", "unique_id": "seed.desafioaeadw.salesperson", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salesperson"], "alias": "salesperson", "checksum": {"name": "sha256", "checksum": "7b12c5a125c05eec56ac66639472167c565bbc847ca40119a298b7f528959961"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5500252, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesperson`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salespersonquotahistory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salespersonquotahistory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salespersonquotahistory.csv", "original_file_path": "seeds/sap_adventure_works/sales/salespersonquotahistory.csv", "unique_id": "seed.desafioaeadw.salespersonquotahistory", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salespersonquotahistory"], "alias": "salespersonquotahistory", "checksum": {"name": "sha256", "checksum": "b26f3f9f2625330666c0d82de817cb270dbf3e9f47ee87a38ceca3b6933b888b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5637252, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salespersonquotahistory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salesreason": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesreason", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salesreason.csv", "original_file_path": "seeds/sap_adventure_works/sales/salesreason.csv", "unique_id": "seed.desafioaeadw.salesreason", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salesreason"], "alias": "salesreason", "checksum": {"name": "sha256", "checksum": "f70ab5944a14c994df78f32e605d432a814d0c73fd28f8cb4ea3f04b0b00b35d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.569416, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesreason`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salestaxrate": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salestaxrate", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salestaxrate.csv", "original_file_path": "seeds/sap_adventure_works/sales/salestaxrate.csv", "unique_id": "seed.desafioaeadw.salestaxrate", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salestaxrate"], "alias": "salestaxrate", "checksum": {"name": "sha256", "checksum": "2107639403099d2990c885e18ea74c19aecbdccc3c0dd55b4cb740ad7f776dfa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5738633, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salestaxrate`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salesterritory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesterritory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salesterritory.csv", "original_file_path": "seeds/sap_adventure_works/sales/salesterritory.csv", "unique_id": "seed.desafioaeadw.salesterritory", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salesterritory"], "alias": "salesterritory", "checksum": {"name": "sha256", "checksum": "9bc25afab05b39670952a60d3bace9687e83a8fd0e19b623c1c84fe6d98e58cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.5880861, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesterritory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.salesterritoryhistory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesterritoryhistory", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/salesterritoryhistory.csv", "original_file_path": "seeds/sap_adventure_works/sales/salesterritoryhistory.csv", "unique_id": "seed.desafioaeadw.salesterritoryhistory", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "salesterritoryhistory"], "alias": "salesterritoryhistory", "checksum": {"name": "sha256", "checksum": "ee54ea3b5e1451adc2d1f370d98141ba80dbf0de672f4bdfc7deff8c5500fa10"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.6015854, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesterritoryhistory`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.shoppingcartitem": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "shoppingcartitem", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/shoppingcartitem.csv", "original_file_path": "seeds/sap_adventure_works/sales/shoppingcartitem.csv", "unique_id": "seed.desafioaeadw.shoppingcartitem", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "shoppingcartitem"], "alias": "shoppingcartitem", "checksum": {"name": "sha256", "checksum": "a953fd35402cfd55ac36367e272a0fe112e2aef7ecd48820344b1589ff1f5eab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.6148279, "relation_name": "`desafioaeadw`.`dbt_cintia`.`shoppingcartitem`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.specialoffer": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "specialoffer", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/specialoffer.csv", "original_file_path": "seeds/sap_adventure_works/sales/specialoffer.csv", "unique_id": "seed.desafioaeadw.specialoffer", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "specialoffer"], "alias": "specialoffer", "checksum": {"name": "sha256", "checksum": "1f30e1998397730aad8c5bfb34f2b2ebf3fdb436bac25aa041c5c4948e606406"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.6206386, "relation_name": "`desafioaeadw`.`dbt_cintia`.`specialoffer`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.specialofferproduct": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "specialofferproduct", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/specialofferproduct.csv", "original_file_path": "seeds/sap_adventure_works/sales/specialofferproduct.csv", "unique_id": "seed.desafioaeadw.specialofferproduct", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "specialofferproduct"], "alias": "specialofferproduct", "checksum": {"name": "sha256", "checksum": "73c89ec804a060b39c320817a4dc9b5b583f90aca90c5cc86a218c6846083f73"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.6294348, "relation_name": "`desafioaeadw`.`dbt_cintia`.`specialofferproduct`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "seed.desafioaeadw.store": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "store", "resource_type": "seed", "package_name": "desafioaeadw", "path": "sap_adventure_works/sales/store.csv", "original_file_path": "seeds/sap_adventure_works/sales/store.csv", "unique_id": "seed.desafioaeadw.store", "fqn": ["desafioaeadw", "sap_adventure_works", "sales", "store"], "alias": "store", "checksum": {"name": "sha256", "checksum": "9ef73231ed5be6f955beff9266a3875330c89b9d681c80b6039ef9ccdac62536"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687786478.6378293, "relation_name": "`desafioaeadw`.`dbt_cintia`.`store`", "raw_code": "", "root_path": "/mnt/c/Users/carlo/Desktop/Cursos/cientistaDados_Lighthouse/Aulas_jornada_tecnica/Desafio_AE/desafioaeadw/desafioaeadw", "depends_on": {"macros": []}}, "model.desafioaeadw.int_location": {"database": "desafioaeadw", "schema": "dbt_cintia_intermediate", "name": "int_location", "resource_type": "model", "package_name": "desafioaeadw", "path": "intermediate/int_location.sql", "original_file_path": "models/intermediate/int_location.sql", "unique_id": "model.desafioaeadw.int_location", "fqn": ["desafioaeadw", "intermediate", "int_location"], "alias": "int_location", "checksum": {"name": "sha256", "checksum": "1b43c6dfe1b2067a082fad9b59e5a358c8ba44f946fcb5bda836bf5442aef043"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1687911896.2495413, "relation_name": "`desafioaeadw`.`dbt_cintia_intermediate`.`int_location`", "raw_code": "with address as (\r\n    select \r\n        addressid\r\n        , addressline1\r\n        , addressline2\r\n        , city\r\n        , stateprovinceid\r\n        , postalcode\r\n    from {{ ref('stg_address') }}\r\n)\r\n\r\n, stateprovince as (\r\n    select \r\n        stateprovinceid\r\n        , stateprovincecode\r\n        , countryregioncode\r\n        , statename\r\n        , territoryid\r\n    from {{ ref('stg_stateprovince') }}\r\n)\r\n\r\n, countryregion as (\r\n    select \r\n        countryregioncode\r\n        , countryname\r\n    from {{ ref('stg_countryregion') }}\r\n)\r\n\r\n, location_join as (\r\n    select\r\n        address.addressid \r\n\t    , address.addressline1\r\n\t    , address.addressline2 \r\n\t    , address.city \r\n\t    , address.stateprovinceid \r\n\t    , address.postalcode \r\n\t    , stateprovince.stateprovincecode \r\n\t    , stateprovince.countryregioncode \r\n\t    , stateprovince.statename\r\n\t    , stateprovince.territoryid\r\n\t    , countryregion.countryname\r\n    from address\r\n    left join stateprovince on address.stateprovinceid = stateprovince.stateprovinceid\r\n    left join countryregion on stateprovince.countryregioncode = countryregion.countryregioncode\r\n)\r\n\r\nselect *\r\nfrom location_join", "language": "sql", "refs": [["stg_address"], ["stg_stateprovince"], ["stg_countryregion"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaeadw.stg_address", "model.desafioaeadw.stg_stateprovince", "model.desafioaeadw.stg_countryregion"]}, "compiled_path": null}, "model.desafioaeadw.stg_address": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_address", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_address.sql", "original_file_path": "models/staging/stg_address.sql", "unique_id": "model.desafioaeadw.stg_address", "fqn": ["desafioaeadw", "staging", "stg_address"], "alias": "stg_address", "checksum": {"name": "sha256", "checksum": "1e7e200c41241643d3745b4ad28a6bf2bb7644606cd131a603deaadbb71c0ac1"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.2550173, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_address`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          addressid\r\n          , addressline1\r\n          , addressline2\r\n          , city\r\n          , stateprovinceid\r\n          , postalcode\r\n          , spatiallocation\r\n          , rowguid\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'address') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "address"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.address"]}, "compiled_path": null}, "model.desafioaeadw.stg_countryregion": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_countryregion", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_countryregion.sql", "original_file_path": "models/staging/stg_countryregion.sql", "unique_id": "model.desafioaeadw.stg_countryregion", "fqn": ["desafioaeadw", "staging", "stg_countryregion"], "alias": "stg_countryregion", "checksum": {"name": "sha256", "checksum": "aafdc134d2cd4bbd130ab83dfa90c11762828532ed8d4e67d1542e961eb18362"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.2598763, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_countryregion`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          countryregioncode\r\n          , name as countryname\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'countryregion') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "countryregion"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.countryregion"]}, "compiled_path": null}, "model.desafioaeadw.stg_creditcard": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_creditcard", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_creditcard.sql", "original_file_path": "models/staging/stg_creditcard.sql", "unique_id": "model.desafioaeadw.stg_creditcard", "fqn": ["desafioaeadw", "staging", "stg_creditcard"], "alias": "stg_creditcard", "checksum": {"name": "sha256", "checksum": "a17918622e645117ef44d4e0680d0850e6e90dcd82c122da6d3836f74f65b611"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.2689435, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_creditcard`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          creditcardid\r\n          , cardtype\r\n          , cardnumber\r\n          , expmonth\r\n          , expyear\r\n        from {{ source('dbt_cintia', 'creditcard') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "creditcard"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.creditcard"]}, "compiled_path": null}, "model.desafioaeadw.int_customer": {"database": "desafioaeadw", "schema": "dbt_cintia_intermediate", "name": "int_customer", "resource_type": "model", "package_name": "desafioaeadw", "path": "intermediate/int_customer.sql", "original_file_path": "models/intermediate/int_customer.sql", "unique_id": "model.desafioaeadw.int_customer", "fqn": ["desafioaeadw", "intermediate", "int_customer"], "alias": "int_customer", "checksum": {"name": "sha256", "checksum": "c88e707baaa212514ada6ef936fc21f9f2e427f02f0be42712b44f5cc84aa676"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1687911896.2780666, "relation_name": "`desafioaeadw`.`dbt_cintia_intermediate`.`int_customer`", "raw_code": "with customer as (\r\n    select \r\n        customerid \r\n        , personid \r\n        , storeid \r\n        , territoryid \r\n    from {{ ref('stg_customer') }}\r\n)\r\n\r\n, store as (\r\n    select \r\n        businessentityid \r\n        , storename\r\n        , salespersonid \r\n    from {{ ref('stg_store') }}\r\n)\r\n\r\n, person as (\r\n    select \r\n        businessentityid\r\n        , concat(ifnull(firstname,' '),' ',ifnull(middlename,' '),' ',ifnull(lastname,' ')) as fullname\r\n    from {{ ref('stg_person') }}\r\n)\r\n\r\n, customer_join as (\r\n    select\r\n        customer.customerid \r\n        , customer.personid \r\n        , customer.storeid \r\n        , customer.territoryid \r\n        , person.businessentityid \r\n        , person.fullname\r\n        , store.storename\r\n        , store.salespersonid \r\n        , case\r\n            when person.fullname is null\r\n            then store.storename\r\n            else person.fullname \r\n            end as customerfullname\r\n    from customer\r\n    left join person on customer.personid = person.businessentityid\r\n    left join store on customer.storeid = store.businessentityid\r\n\r\n)\r\n\r\nselect *\r\nfrom customer_join", "language": "sql", "refs": [["stg_customer"], ["stg_store"], ["stg_person"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaeadw.stg_customer", "model.desafioaeadw.stg_store", "model.desafioaeadw.stg_person"]}, "compiled_path": null}, "model.desafioaeadw.stg_customer": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_customer", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_customer.sql", "original_file_path": "models/staging/stg_customer.sql", "unique_id": "model.desafioaeadw.stg_customer", "fqn": ["desafioaeadw", "staging", "stg_customer"], "alias": "stg_customer", "checksum": {"name": "sha256", "checksum": "3e7a87f50d85de56bc815ad1414cc4aea3007a0b92e0ed50a953ea1d2914d104"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.283101, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_customer`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          customerid\r\n          , personid\r\n          , storeid\r\n          , territoryid\r\n          , rowguid\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'customer') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "customer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.customer"]}, "compiled_path": null}, "model.desafioaeadw.int_employee": {"database": "desafioaeadw", "schema": "dbt_cintia_intermediate", "name": "int_employee", "resource_type": "model", "package_name": "desafioaeadw", "path": "intermediate/int_employee.sql", "original_file_path": "models/intermediate/int_employee.sql", "unique_id": "model.desafioaeadw.int_employee", "fqn": ["desafioaeadw", "intermediate", "int_employee"], "alias": "int_employee", "checksum": {"name": "sha256", "checksum": "551f244e03b51eba77ce5cefe556fa692416f1fbc1b98a1a7e0d0ff6b8699073"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1687911896.2877676, "relation_name": "`desafioaeadw`.`dbt_cintia_intermediate`.`int_employee`", "raw_code": "with salesperson as (\r\n    select \r\n        businessentityid\r\n        , territoryid\r\n        , salesquota\r\n        , bonus\r\n        , commissionpct\r\n        , salesytd\r\n        , saleslastyear\r\n    from {{ ref('stg_salesperson') }}\r\n)\r\n\r\n, employee as (\r\n    select \r\n        businessentityid\r\n        , jobtitle\r\n        , birthdate\r\n        , gender\r\n        , hiredate\r\n    from {{ ref('stg_employee') }}\r\n)\r\n\r\n, person as (\r\n    select \r\n        businessentityid\r\n        , concat(ifnull(firstname,' '),' ',ifnull(middlename,' '),' ',ifnull(lastname,' ')) as fullname\r\n        , persontype\r\n        , emailpromotion\r\n    from {{ ref('stg_person') }}\r\n)\r\n\r\n, employee_join as (\r\n    select\r\n        salesperson.businessentityid \r\n        , salesperson.territoryid \r\n        , salesperson.salesquota \r\n        , salesperson.bonus \r\n        , salesperson.commissionpct \r\n        , salesperson.salesytd \r\n        , salesperson.saleslastyear\r\n        , employee.jobtitle \r\n        , employee.birthdate \r\n        , employee.gender \r\n        , employee.hiredate \r\n        , person.fullname\r\n        , person.persontype \r\n        , person.emailpromotion\r\n    from salesperson\r\n    left join employee on salesperson.businessentityid = employee.businessentityid \r\n    left join person on salesperson.businessentityid = person.businessentityid\r\n\r\n)\r\n\r\nselect *\r\nfrom employee_join", "language": "sql", "refs": [["stg_salesperson"], ["stg_employee"], ["stg_person"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaeadw.stg_salesperson", "model.desafioaeadw.stg_employee", "model.desafioaeadw.stg_person"]}, "compiled_path": null}, "model.desafioaeadw.stg_employee": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_employee", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_employee.sql", "original_file_path": "models/staging/stg_employee.sql", "unique_id": "model.desafioaeadw.stg_employee", "fqn": ["desafioaeadw", "staging", "stg_employee"], "alias": "stg_employee", "checksum": {"name": "sha256", "checksum": "eea4f53bc28a7050d4fa3061d94ca59aa68ad65c90095ff09c3163202cb91a53"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.2926927, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_employee`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          businessentityid\r\n          , nationalidnumber\r\n          , loginid\r\n          , jobtitle\r\n          , birthdate\r\n          , maritalstatus\r\n          , gender\r\n          , hiredate\r\n          , salariedflag\r\n          , vacationhours\r\n          , sickleavehours\r\n          , currentflag\r\n          , rowguid\r\n          , modifieddate\r\n          , organizationnode\r\n        from {{ source('dbt_cintia', 'employee') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "employee"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.employee"]}, "compiled_path": null}, "model.desafioaeadw.stg_person": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_person", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_person.sql", "original_file_path": "models/staging/stg_person.sql", "unique_id": "model.desafioaeadw.stg_person", "fqn": ["desafioaeadw", "staging", "stg_person"], "alias": "stg_person", "checksum": {"name": "sha256", "checksum": "aa065e3f38a9e69470f5b0d86250fae2585419afa8313c02359cdc126ac38c75"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.2982626, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_person`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          businessentityid\r\n          , persontype\r\n          , namestyle\r\n          , title\r\n          , firstname\r\n          , middlename\r\n          , lastname\r\n          , suffix\r\n          , emailpromotion\r\n          , additionalcontactinfo\r\n          , demographics\r\n          , rowguid\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'person') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "person"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.person"]}, "compiled_path": null}, "model.desafioaeadw.int_product": {"database": "desafioaeadw", "schema": "dbt_cintia_intermediate", "name": "int_product", "resource_type": "model", "package_name": "desafioaeadw", "path": "intermediate/int_product.sql", "original_file_path": "models/intermediate/int_product.sql", "unique_id": "model.desafioaeadw.int_product", "fqn": ["desafioaeadw", "intermediate", "int_product"], "alias": "int_product", "checksum": {"name": "sha256", "checksum": "e2c1065bbc3d961f7a19e2709e2822030b581c18d9f0cb32ecb2488d9bec81b9"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1687911896.3135765, "relation_name": "`desafioaeadw`.`dbt_cintia_intermediate`.`int_product`", "raw_code": "with product as (\r\n    select \r\n\t    productid \r\n        , productsubcategoryid\r\n\t    , productname\r\n\t    , productnumber \r\n\t    , color \r\n\t    , standardcost \r\n\t    , listprice\r\n    from {{ ref('stg_product') }}\r\n)\r\n\r\n, productsubcategory as (\r\n    select \r\n        productsubcategoryid\r\n        , productcategoryid\r\n        , subcategoryname\r\n    from {{ ref('stg_productsubcategory') }}\r\n)\r\n\r\n, productcategory as (\r\n    select \r\n        productcategoryid\r\n        , categoryname\r\n    from {{ ref('stg_productcategory') }}\r\n)\r\n\r\n, product_join as (\r\n    select\r\n\t    product.productid \r\n\t    , product.productname\r\n\t    , product.productnumber \r\n\t    , product.color \r\n\t    , product.standardcost \r\n\t    , product.listprice \r\n\t    , productsubcategory.subcategoryname\r\n\t    , productcategory.categoryname\r\n    from product\r\n    left join productsubcategory on product.productsubcategoryid = productsubcategory.productsubcategoryid\r\n    left join productcategory on productcategory.productcategoryid = productsubcategory.productcategoryid\r\n)\r\n\r\nselect *\r\nfrom product_join", "language": "sql", "refs": [["stg_product"], ["stg_productsubcategory"], ["stg_productcategory"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaeadw.stg_product", "model.desafioaeadw.stg_productsubcategory", "model.desafioaeadw.stg_productcategory"]}, "compiled_path": null}, "model.desafioaeadw.stg_product": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_product", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_product.sql", "original_file_path": "models/staging/stg_product.sql", "unique_id": "model.desafioaeadw.stg_product", "fqn": ["desafioaeadw", "staging", "stg_product"], "alias": "stg_product", "checksum": {"name": "sha256", "checksum": "5771f32a85dff32738e5c23f854ee6051a200751d8cd4b8e7f4cf1871d82cbec"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3193464, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_product`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          productid\r\n          , name as productname\r\n          , productnumber\r\n          , makeflag\r\n          , finishedgoodsflag\r\n          , color\r\n          , safetystocklevel\r\n          , reorderpoint\r\n          , standardcost\r\n          , listprice\r\n          , size\r\n          , sizeunitmeasurecode\r\n          , weightunitmeasurecode\r\n          , weight as productweight\r\n          , daystomanufacture\r\n          , productline\r\n          , class\r\n          , style\r\n          , productsubcategoryid\r\n          , productmodelid\r\n          , sellstartdate\r\n          , sellenddate\r\n          , discontinueddate\r\n          , rowguid\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'product') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "product"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.product"]}, "compiled_path": null}, "model.desafioaeadw.stg_productcategory": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_productcategory", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_productcategory.sql", "original_file_path": "models/staging/stg_productcategory.sql", "unique_id": "model.desafioaeadw.stg_productcategory", "fqn": ["desafioaeadw", "staging", "stg_productcategory"], "alias": "stg_productcategory", "checksum": {"name": "sha256", "checksum": "c518f7cf9c4cf61a65cdf82b750614b6167f8a75db0fad673c77482555790be8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3241029, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_productcategory`", "raw_code": "with\r\n    sources as (\r\n        select \r\n            productcategoryid\r\n          , name as categoryname\r\n        from {{ source('dbt_cintia', 'productcategory') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "productcategory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.productcategory"]}, "compiled_path": null}, "model.desafioaeadw.stg_productsubcategory": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_productsubcategory", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_productsubcategory.sql", "original_file_path": "models/staging/stg_productsubcategory.sql", "unique_id": "model.desafioaeadw.stg_productsubcategory", "fqn": ["desafioaeadw", "staging", "stg_productsubcategory"], "alias": "stg_productsubcategory", "checksum": {"name": "sha256", "checksum": "47419c42592495a5a0dcf8e65ed1a9d8ed0d84880a6594ab8a8f710ec8f5a997"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3289359, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_productsubcategory`", "raw_code": "with\r\n    sources as (\r\n        select \r\n            productsubcategoryid\r\n            , productcategoryid\r\n            , name as subcategoryname\r\n        from {{ source('dbt_cintia', 'productsubcategory') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "productsubcategory"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.productsubcategory"]}, "compiled_path": null}, "model.desafioaeadw.stg_salesorderdetail": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_salesorderdetail", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_salesorderdetail.sql", "original_file_path": "models/staging/stg_salesorderdetail.sql", "unique_id": "model.desafioaeadw.stg_salesorderdetail", "fqn": ["desafioaeadw", "staging", "stg_salesorderdetail"], "alias": "stg_salesorderdetail", "checksum": {"name": "sha256", "checksum": "20c508854f707af0271869b59d3d6c47271fb05f42fe2b08db3a335b4a4750a2"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3394752, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_salesorderdetail`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          salesorderid\r\n          , salesorderdetailid\r\n          , carriertrackingnumber\r\n          , orderqty\r\n          , productid\r\n          , specialofferid\r\n          , unitprice\r\n          , unitpricediscount\r\n          , rowguid\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'salesorderdetail') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderdetail"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderdetail"]}, "compiled_path": null}, "model.desafioaeadw.int_salesreason": {"database": "desafioaeadw", "schema": "dbt_cintia_intermediate", "name": "int_salesreason", "resource_type": "model", "package_name": "desafioaeadw", "path": "intermediate/int_salesreason.sql", "original_file_path": "models/intermediate/int_salesreason.sql", "unique_id": "model.desafioaeadw.int_salesreason", "fqn": ["desafioaeadw", "intermediate", "int_salesreason"], "alias": "int_salesreason", "checksum": {"name": "sha256", "checksum": "3670f1fcc21e5418fd9230e9e46a8ce8be7e1e5973d5ff7d4bf9b6040284bc96"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1687911896.3544776, "relation_name": "`desafioaeadw`.`dbt_cintia_intermediate`.`int_salesreason`", "raw_code": "with salesorderheadersalesreason as (\r\n    select \r\n        salesorderid\r\n        , salesreasonid\r\n    from {{ ref('stg_salesorderheadersalesreason') }}\r\n)\r\n\r\n, salesreason as (\r\n    select \r\n        salesreasonid\r\n        , reasonname\r\n        , reasontype\r\n    from {{ ref('stg_salesreason') }}\r\n)\r\n\r\n, salesreason_join as (\r\n    select\r\n        salesorderheadersalesreason.salesreasonid\r\n        , salesorderheadersalesreason.salesorderid\r\n        , salesreason.reasonname\r\n        , salesreason.reasontype\r\n    from salesorderheadersalesreason\r\n    left join salesreason on salesorderheadersalesreason.salesreasonid = salesreason.salesreasonid \r\n)\r\n\r\nselect *\r\nfrom salesreason_join", "language": "sql", "refs": [["stg_salesorderheadersalesreason"], ["stg_salesreason"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaeadw.stg_salesorderheadersalesreason", "model.desafioaeadw.stg_salesreason"]}, "compiled_path": null}, "model.desafioaeadw.stg_salesorderheadersalesreason": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_salesorderheadersalesreason", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_salesorderheadersalesreason.sql", "original_file_path": "models/staging/stg_salesorderheadersalesreason.sql", "unique_id": "model.desafioaeadw.stg_salesorderheadersalesreason", "fqn": ["desafioaeadw", "staging", "stg_salesorderheadersalesreason"], "alias": "stg_salesorderheadersalesreason", "checksum": {"name": "sha256", "checksum": "c61defff8e645a5d1051f6a2a5ae4278323f15839caa876ab967003bd7ef9fa6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3600552, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_salesorderheadersalesreason`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          salesorderid\r\n          , salesreasonid \r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'salesorderheadersalesreason') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderheadersalesreason"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderheadersalesreason"]}, "compiled_path": null}, "model.desafioaeadw.stg_salesperson": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_salesperson", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_salesperson.sql", "original_file_path": "models/staging/stg_salesperson.sql", "unique_id": "model.desafioaeadw.stg_salesperson", "fqn": ["desafioaeadw", "staging", "stg_salesperson"], "alias": "stg_salesperson", "checksum": {"name": "sha256", "checksum": "8073baf48bad91dbb650f055ae3c6956577306a20cf1a4251a8ee85b588e8438"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.366143, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_salesperson`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          businessentityid\r\n          , territoryid\r\n          , salesquota\r\n          , bonus\r\n          , commissionpct\r\n          , salesytd\r\n          , saleslastyear\r\n          , rowguid\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'salesperson') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesperson"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.salesperson"]}, "compiled_path": null}, "model.desafioaeadw.stg_salesreason": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_salesreason", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_salesreason.sql", "original_file_path": "models/staging/stg_salesreason.sql", "unique_id": "model.desafioaeadw.stg_salesreason", "fqn": ["desafioaeadw", "staging", "stg_salesreason"], "alias": "stg_salesreason", "checksum": {"name": "sha256", "checksum": "1c2badf47e051f8de08b69e34df508c14855f9d8928354b6c8cd6b0a0e69c476"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3707502, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_salesreason`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          salesreasonid\r\n          , name as reasonname\r\n          , reasontype\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'salesreason') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesreason"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.salesreason"]}, "compiled_path": null}, "model.desafioaeadw.stg_stateprovince": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_stateprovince", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_stateprovince.sql", "original_file_path": "models/staging/stg_stateprovince.sql", "unique_id": "model.desafioaeadw.stg_stateprovince", "fqn": ["desafioaeadw", "staging", "stg_stateprovince"], "alias": "stg_stateprovince", "checksum": {"name": "sha256", "checksum": "1fee3b86517581fdaa7774bc07839625369e72a2b42abee6145d984c9c14bf1f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3752837, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_stateprovince`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          stateprovinceid\r\n          , stateprovincecode\r\n          , countryregioncode\r\n          , isonlystateprovinceflag\r\n          , name as statename\r\n          , territoryid\r\n          , rowguid\r\n          , modifieddate\r\n        from {{ source('dbt_cintia', 'stateprovince') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "stateprovince"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.stateprovince"]}, "compiled_path": null}, "model.desafioaeadw.stg_store": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_store", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_store.sql", "original_file_path": "models/staging/stg_store.sql", "unique_id": "model.desafioaeadw.stg_store", "fqn": ["desafioaeadw", "staging", "stg_store"], "alias": "stg_store", "checksum": {"name": "sha256", "checksum": "c28189911e11b127a554e043b82b1c57d4edcc156ca2dd3ae1c08617c4b71656"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1687911896.3805506, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_store`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          businessentityid\r\n          , name as storename\r\n          , salespersonid\r\n        from {{ source('dbt_cintia', 'store') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "store"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.store"]}, "compiled_path": null}, "test.desafioaeadw.source_unique_dbt_cintia_address_addressid.702f8eae55": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "addressid", "model": "{{ get_where_subquery(source('dbt_cintia', 'address')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_address_addressid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_address_addressid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_address_addressid.702f8eae55", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_address_addressid"], "alias": "source_unique_dbt_cintia_address_addressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4418824, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "address"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.address"]}, "compiled_path": null, "column_name": "addressid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_address_addressid.390d71e542": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "addressid", "model": "{{ get_where_subquery(source('dbt_cintia', 'address')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_address_addressid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_address_addressid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_address_addressid.390d71e542", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_address_addressid"], "alias": "source_not_null_dbt_cintia_address_addressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4460256, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "address"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.address"]}, "compiled_path": null, "column_name": "addressid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_countryregion_countryregioncode.12dd7e57b9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "countryregioncode", "model": "{{ get_where_subquery(source('dbt_cintia', 'countryregion')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_countryregion_countryregioncode", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_countryregion_countryregioncode.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_countryregion_countryregioncode.12dd7e57b9", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_countryregion_countryregioncode"], "alias": "source_unique_dbt_cintia_countryregion_countryregioncode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4502766, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "countryregion"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.countryregion"]}, "compiled_path": null, "column_name": "countryregioncode", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_countryregion_countryregioncode.3d94aeab6e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "countryregioncode", "model": "{{ get_where_subquery(source('dbt_cintia', 'countryregion')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_countryregion_countryregioncode", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_countryregion_countryregioncode.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_countryregion_countryregioncode.3d94aeab6e", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_countryregion_countryregioncode"], "alias": "source_not_null_dbt_cintia_countryregion_countryregioncode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4530804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "countryregion"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.countryregion"]}, "compiled_path": null, "column_name": "countryregioncode", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_creditcard_creditcardid.bdfd82db3b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(source('dbt_cintia', 'creditcard')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_creditcard_creditcardid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_creditcard_creditcardid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_creditcard_creditcardid.bdfd82db3b", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_creditcard_creditcardid"], "alias": "source_unique_dbt_cintia_creditcard_creditcardid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.456421, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "creditcard"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.creditcard"]}, "compiled_path": null, "column_name": "creditcardid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_creditcard_creditcardid.f016c94e52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(source('dbt_cintia', 'creditcard')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_creditcard_creditcardid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_creditcard_creditcardid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_creditcard_creditcardid.f016c94e52", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_creditcard_creditcardid"], "alias": "source_not_null_dbt_cintia_creditcard_creditcardid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4592786, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "creditcard"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.creditcard"]}, "compiled_path": null, "column_name": "creditcardid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_customer_customerid.f24eac5df0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(source('dbt_cintia', 'customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_customer_customerid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_customer_customerid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_customer_customerid.f24eac5df0", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_customer_customerid"], "alias": "source_unique_dbt_cintia_customer_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4626007, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.customer"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_customer_customerid.a9460e7b9a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(source('dbt_cintia', 'customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_customer_customerid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_customer_customerid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_customer_customerid.a9460e7b9a", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_customer_customerid"], "alias": "source_not_null_dbt_cintia_customer_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4654577, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.customer"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_customer_personid.238a3e6a87": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "personid", "model": "{{ get_where_subquery(source('dbt_cintia', 'customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_customer_personid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_customer_personid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_customer_personid.238a3e6a87", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_customer_personid"], "alias": "source_unique_dbt_cintia_customer_personid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4685802, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.customer"]}, "compiled_path": null, "column_name": "personid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_employee_businessentityid.0340a127ea": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'employee')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_employee_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_employee_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_employee_businessentityid.0340a127ea", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_employee_businessentityid"], "alias": "source_unique_dbt_cintia_employee_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4716682, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "employee"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.employee"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_employee_businessentityid.d6bc521ace": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'employee')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_employee_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_employee_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_employee_businessentityid.d6bc521ace", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_employee_businessentityid"], "alias": "source_not_null_dbt_cintia_employee_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4744399, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "employee"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.employee"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_person_businessentityid.4f8ba12edb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'person')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_person_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_person_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_person_businessentityid.4f8ba12edb", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_person_businessentityid"], "alias": "source_unique_dbt_cintia_person_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.477841, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "person"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.person"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_person_businessentityid.cfc39e7537": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'person')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_person_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_person_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_person_businessentityid.cfc39e7537", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_person_businessentityid"], "alias": "source_not_null_dbt_cintia_person_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4811678, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "person"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.person"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_product_productid.d3a2ceaccc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(source('dbt_cintia', 'product')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_product_productid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_product_productid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_product_productid.d3a2ceaccc", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_product_productid"], "alias": "source_unique_dbt_cintia_product_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4842596, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "product"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.product"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_product_productid.c5cfbebb09": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(source('dbt_cintia', 'product')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_product_productid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_product_productid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_product_productid.c5cfbebb09", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_product_productid"], "alias": "source_not_null_dbt_cintia_product_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.487052, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "product"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.product"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_productcategory_productcategoryid.6ce999c879": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productcategoryid", "model": "{{ get_where_subquery(source('dbt_cintia', 'productcategory')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_productcategory_productcategoryid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_productcategory_productcategoryid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_productcategory_productcategoryid.6ce999c879", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_productcategory_productcategoryid"], "alias": "source_unique_dbt_cintia_productcategory_productcategoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.4902136, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "productcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.productcategory"]}, "compiled_path": null, "column_name": "productcategoryid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_productcategory_productcategoryid.9417f41460": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productcategoryid", "model": "{{ get_where_subquery(source('dbt_cintia', 'productcategory')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_productcategory_productcategoryid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_productcategory_productcategoryid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_productcategory_productcategoryid.9417f41460", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_productcategory_productcategoryid"], "alias": "source_not_null_dbt_cintia_productcategory_productcategoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.493415, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "productcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.productcategory"]}, "compiled_path": null, "column_name": "productcategoryid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_productsubcategory_productsubcategoryid.db4c3d9cef": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productsubcategoryid", "model": "{{ get_where_subquery(source('dbt_cintia', 'productsubcategory')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_productsubcategory_productsubcategoryid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_produ_07e58bea64d6a5f42c7a3d65ff4b4246.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_productsubcategory_productsubcategoryid.db4c3d9cef", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_productsubcategory_productsubcategoryid"], "alias": "source_unique_dbt_cintia_produ_07e58bea64d6a5f42c7a3d65ff4b4246", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_dbt_cintia_produ_07e58bea64d6a5f42c7a3d65ff4b4246", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_dbt_cintia_produ_07e58bea64d6a5f42c7a3d65ff4b4246"}, "created_at": 1687911896.4966946, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_dbt_cintia_produ_07e58bea64d6a5f42c7a3d65ff4b4246\") }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "productsubcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.productsubcategory"]}, "compiled_path": null, "column_name": "productsubcategoryid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_productsubcategory_productsubcategoryid.1ed6ae4159": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productsubcategoryid", "model": "{{ get_where_subquery(source('dbt_cintia', 'productsubcategory')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_productsubcategory_productsubcategoryid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_pro_8172e64ba9b74e31cfd5d7e9c943f826.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_productsubcategory_productsubcategoryid.1ed6ae4159", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_productsubcategory_productsubcategoryid"], "alias": "source_not_null_dbt_cintia_pro_8172e64ba9b74e31cfd5d7e9c943f826", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_dbt_cintia_pro_8172e64ba9b74e31cfd5d7e9c943f826", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_dbt_cintia_pro_8172e64ba9b74e31cfd5d7e9c943f826"}, "created_at": 1687911896.499545, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_dbt_cintia_pro_8172e64ba9b74e31cfd5d7e9c943f826\") }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "productsubcategory"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.productsubcategory"]}, "compiled_path": null, "column_name": "productsubcategoryid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_salesorderdetail_salesorderdetailid.03df8d3a4e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_salesorderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_salesorderdetail_salesorderdetailid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_salesorderdetail_salesorderdetailid.03df8d3a4e", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_salesorderdetail_salesorderdetailid"], "alias": "source_unique_dbt_cintia_salesorderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.502771, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderdetail"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid.9ce055e52e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid.9ce055e52e", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid"], "alias": "source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5057883, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderdetail"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderid.8225b6852e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_salesorderdetail_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_salesorderdetail_salesorderid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderid.8225b6852e", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_salesorderdetail_salesorderid"], "alias": "source_not_null_dbt_cintia_salesorderdetail_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5088468, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderdetail"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_salesorderheader_salesorderid.e9d22a9dcb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_salesorderheader_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_salesorderheader_salesorderid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_salesorderheader_salesorderid.e9d22a9dcb", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_salesorderheader_salesorderid"], "alias": "source_unique_dbt_cintia_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.51222, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderheader"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderheader"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_salesorderid.da27b2fc22": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_salesorderheader_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_salesorderheader_salesorderid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_salesorderid.da27b2fc22", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_salesorderheader_salesorderid"], "alias": "source_not_null_dbt_cintia_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5149732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderheader"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderheader"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_customerid.f3869783df": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_salesorderheader_customerid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_salesorderheader_customerid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_customerid.f3869783df", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_salesorderheader_customerid"], "alias": "source_not_null_dbt_cintia_salesorderheader_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5177853, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderheader"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderheader"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheadersalesreason_salesorderid.a505bde384": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesorderheadersalesreason')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_salesorderheadersalesreason_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_sal_ec133fe88cc01e52ac9f94ee33eef341.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheadersalesreason_salesorderid.a505bde384", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_salesorderheadersalesreason_salesorderid"], "alias": "source_not_null_dbt_cintia_sal_ec133fe88cc01e52ac9f94ee33eef341", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_dbt_cintia_sal_ec133fe88cc01e52ac9f94ee33eef341", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_dbt_cintia_sal_ec133fe88cc01e52ac9f94ee33eef341"}, "created_at": 1687911896.5221343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_dbt_cintia_sal_ec133fe88cc01e52ac9f94ee33eef341\") }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderheadersalesreason"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderheadersalesreason"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_salesperson_businessentityid.d447e41aa4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesperson')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_salesperson_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_salesperson_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_salesperson_businessentityid.d447e41aa4", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_salesperson_businessentityid"], "alias": "source_unique_dbt_cintia_salesperson_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5255132, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesperson"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.salesperson"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_salesperson_businessentityid.b433d7ef88": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesperson')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_salesperson_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_salesperson_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_salesperson_businessentityid.b433d7ef88", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_salesperson_businessentityid"], "alias": "source_not_null_dbt_cintia_salesperson_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5285099, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesperson"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.salesperson"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_salesreason_salesreasonid.6b2b3f6489": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesreasonid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesreason')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_salesreason_salesreasonid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_salesreason_salesreasonid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_salesreason_salesreasonid.6b2b3f6489", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_salesreason_salesreasonid"], "alias": "source_unique_dbt_cintia_salesreason_salesreasonid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5316567, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesreason"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.salesreason"]}, "compiled_path": null, "column_name": "salesreasonid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_salesreason_salesreasonid.c425b95d75": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesreasonid", "model": "{{ get_where_subquery(source('dbt_cintia', 'salesreason')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_salesreason_salesreasonid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_salesreason_salesreasonid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_salesreason_salesreasonid.c425b95d75", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_salesreason_salesreasonid"], "alias": "source_not_null_dbt_cintia_salesreason_salesreasonid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5347166, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesreason"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.salesreason"]}, "compiled_path": null, "column_name": "salesreasonid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_stateprovince_stateprovinceid.adbac1647e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stateprovinceid", "model": "{{ get_where_subquery(source('dbt_cintia', 'stateprovince')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_stateprovince_stateprovinceid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_stateprovince_stateprovinceid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_stateprovince_stateprovinceid.adbac1647e", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_stateprovince_stateprovinceid"], "alias": "source_unique_dbt_cintia_stateprovince_stateprovinceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5378292, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.stateprovince"]}, "compiled_path": null, "column_name": "stateprovinceid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_stateprovince_stateprovinceid.522454b4a0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "stateprovinceid", "model": "{{ get_where_subquery(source('dbt_cintia', 'stateprovince')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_stateprovince_stateprovinceid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_stateprovince_stateprovinceid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_stateprovince_stateprovinceid.522454b4a0", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_stateprovince_stateprovinceid"], "alias": "source_not_null_dbt_cintia_stateprovince_stateprovinceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5418055, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "stateprovince"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.stateprovince"]}, "compiled_path": null, "column_name": "stateprovinceid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_unique_dbt_cintia_store_businessentityid.cea51aa654": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'store')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_unique_dbt_cintia_store_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_unique_dbt_cintia_store_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_unique_dbt_cintia_store_businessentityid.cea51aa654", "fqn": ["desafioaeadw", "staging", "source_unique_dbt_cintia_store_businessentityid"], "alias": "source_unique_dbt_cintia_store_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.5465965, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "store"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.desafioaeadw.dbt_cintia.store"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "test.desafioaeadw.source_not_null_dbt_cintia_store_businessentityid.f97b8a6adb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "businessentityid", "model": "{{ get_where_subquery(source('dbt_cintia', 'store')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "source_not_null_dbt_cintia_store_businessentityid", "resource_type": "test", "package_name": "desafioaeadw", "path": "source_not_null_dbt_cintia_store_businessentityid.sql", "original_file_path": "models/staging/sources.yml", "unique_id": "test.desafioaeadw.source_not_null_dbt_cintia_store_businessentityid.f97b8a6adb", "fqn": ["desafioaeadw", "staging", "source_not_null_dbt_cintia_store_businessentityid"], "alias": "source_not_null_dbt_cintia_store_businessentityid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1687911896.549797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["dbt_cintia", "store"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.desafioaeadw.dbt_cintia.store"]}, "compiled_path": null, "column_name": "businessentityid", "file_key_name": "sources.dbt_cintia"}, "model.desafioaeadw.int_salesorderdetail": {"database": "desafioaeadw", "schema": "dbt_cintia_intermediate", "name": "int_salesorderdetail", "resource_type": "model", "package_name": "desafioaeadw", "path": "intermediate/int_salesorderdetail.sql", "original_file_path": "models/intermediate/int_salesorderdetail.sql", "unique_id": "model.desafioaeadw.int_salesorderdetail", "fqn": ["desafioaeadw", "intermediate", "int_salesorderdetail"], "alias": "int_salesorderdetail", "checksum": {"name": "sha256", "checksum": "c9026cb8f71dad74ed530a2ef041ebdc978a5ba683146bb2cb0e328ef3344332"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "intermediate"}, "created_at": 1688047433.0293612, "relation_name": "`desafioaeadw`.`dbt_cintia_intermediate`.`int_salesorderdetail`", "raw_code": "with salesorderdetail as (\r\n    select \r\n        salesorderid \r\n        , salesorderdetailid \r\n        , orderqty \r\n        , productid \r\n        , unitprice \r\n        , unitpricediscount \r\n        , (orderqty * unitprice) as grossrevenue\r\n        , (orderqty * unitprice * unitpricediscount) as discount\r\n    from {{ ref('stg_salesorderdetail') }}\r\n)\r\n\r\n, salesorderdetail_join as (\r\n    select\r\n        salesorderdetail.salesorderid \r\n        , salesorderdetail.salesorderdetailid \r\n        , salesorderdetail.orderqty \r\n        , salesorderdetail.productid \r\n        , salesorderdetail.unitprice \r\n        , salesorderdetail.unitpricediscount \r\n        , salesorderdetail.grossrevenue\r\n        , salesorderdetail.discount \r\n    from salesorderdetail\r\n)\r\n\r\nselect *\r\nfrom salesorderdetail_join", "language": "sql", "refs": [["stg_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaeadw.stg_salesorderdetail"]}, "compiled_path": null}, "model.desafioaeadw.stg_salesorderheader": {"database": "desafioaeadw", "schema": "dbt_cintia_staging", "name": "stg_salesorderheader", "resource_type": "model", "package_name": "desafioaeadw", "path": "staging/stg_salesorderheader.sql", "original_file_path": "models/staging/stg_salesorderheader.sql", "unique_id": "model.desafioaeadw.stg_salesorderheader", "fqn": ["desafioaeadw", "staging", "stg_salesorderheader"], "alias": "stg_salesorderheader", "checksum": {"name": "sha256", "checksum": "df97f0c0abfe78c7558f8ade8343a902cddc25a9e978cc420f128ead8665dd86"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "staging"}, "created_at": 1688331148.4610288, "relation_name": "`desafioaeadw`.`dbt_cintia_staging`.`stg_salesorderheader`", "raw_code": "with\r\n    sources as (\r\n        select \r\n          salesorderid\r\n          , revisionnumber\r\n          , orderdate\r\n          , duedate\r\n          , shipdate\r\n          , status as orderstatus\r\n          , onlineorderflag\r\n          , purchaseordernumber\r\n          , accountnumber\r\n          , customerid\r\n          , salespersonid\r\n          , territoryid\r\n          , billtoaddressid\r\n          , shiptoaddressid\r\n          , shipmethodid\r\n          , creditcardid\r\n          , creditcardapprovalcode\r\n          , currencyrateid\r\n          , subtotal\r\n          , taxamt\r\n          , freight\r\n          , totaldue\r\n          , comment\r\n          , rowguid\r\n          , modifieddate \r\n        from {{ source('dbt_cintia', 'salesorderheader') }} \r\n    )\r\n\r\nselect *\r\nfrom sources", "language": "sql", "refs": [], "sources": [["dbt_cintia", "salesorderheader"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.desafioaeadw.dbt_cintia.salesorderheader"]}, "compiled_path": null}, "test.desafioaeadw.teste_faturamento_2011": {"database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "teste_faturamento_2011", "resource_type": "test", "package_name": "desafioaeadw", "path": "teste_faturamento_2011.sql", "original_file_path": "tests/teste_faturamento_2011.sql", "unique_id": "test.desafioaeadw.teste_faturamento_2011", "fqn": ["desafioaeadw", "teste_faturamento_2011"], "alias": "teste_faturamento_2011", "checksum": {"name": "sha256", "checksum": "f2a32c9eae26914538ba78b09ab3d179c887f6e10064fab3b10f1aa2a13e4cb5"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688430588.5682006, "relation_name": null, "raw_code": "with int_salesorderdetail as (\r\n    select \r\n        grossrevenue\r\n        , salesorderid\r\n    from {{ ref('int_salesorderdetail')  }}\r\n)\r\n\r\n, fct_salesorderheader as (\r\n    select \r\n        orderdate\r\n        , salesorderid\r\n    from {{ ref('fct_salesorderheader')  }}\r\n)\r\n\r\n, teste_faturamento_2011 as (\r\n    select \r\n        sum(int_salesorderdetail.grossrevenue) as resultado\r\n    from int_salesorderdetail\r\n    left join fct_salesorderheader on int_salesorderdetail.salesorderid = fct_salesorderheader.salesorderid \r\n    where fct_salesorderheader.orderdate between '2011-01-01' and '2012-01-01'\r\n    having sum(int_salesorderdetail.grossrevenue) = 12646112.162755013\r\n)\r\n\r\nselect *\r\nfrom teste_faturamento_2011", "language": "sql", "refs": [["int_salesorderdetail"], ["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.desafioaeadw.int_salesorderdetail", "model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null}, "model.desafioaeadw.dim_product": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "dim_product", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/dim_product.sql", "original_file_path": "models/marts/dim_product.sql", "unique_id": "model.desafioaeadw.dim_product", "fqn": ["desafioaeadw", "marts", "dim_product"], "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "f55ea30fbb86c91d1738774c07865134673ea643f1154a0f97a7b0e7d9192fa0"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela dimens\u00e3o de produtos vendidos", "columns": {"product_sk": {"name": "product_sk", "description": "SK da tabela dimens\u00e3o do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productid": {"name": "productid", "description": "PK ID do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productname": {"name": "productname", "description": "Nome do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "standardcost": {"name": "standardcost", "description": "Valor padr\u00e3o do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "listprice": {"name": "listprice", "description": "Valor de venda do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subcategoryname": {"name": "subcategoryname", "description": "Nome da categoria do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categoryname": {"name": "categoryname", "description": "Nome da categoria do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/dim_product.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688592026.3807957, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`dim_product`", "raw_code": "with int_salesorderdetail as (\r\n    select\r\n        distinct(productid)\r\n    from {{ ref('int_salesorderdetail')}}   \r\n)\r\n\r\n, int_product as (\r\n    select\r\n        productid \r\n        , productname\r\n        , productnumber \r\n        , standardcost \r\n        , listprice \r\n        , subcategoryname\r\n        , categoryname\r\n    from {{ ref('int_product') }}\r\n)\r\n\r\n, dim_product as (\r\n    select \r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['int_salesorderdetail.productid'\r\n            , 'int_product.productid']\r\n        ) }} as product_sk\r\n        , int_product.productid\r\n        , int_product.productname\r\n        , int_product.standardcost \r\n        , int_product.listprice \r\n        , int_product.subcategoryname\r\n        , int_product.categoryname\r\n    from int_salesorderdetail\r\n    left join int_product on int_salesorderdetail.productid = int_product.productid\r\n)\r\n\r\nselect *\r\nfrom dim_product", "language": "sql", "refs": [["int_salesorderdetail"], ["int_product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.int_salesorderdetail", "model.desafioaeadw.int_product"]}, "compiled_path": null}, "model.desafioaeadw.dim_creditcard": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "dim_creditcard", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/dim_creditcard.sql", "original_file_path": "models/marts/dim_creditcard.sql", "unique_id": "model.desafioaeadw.dim_creditcard", "fqn": ["desafioaeadw", "marts", "dim_creditcard"], "alias": "dim_creditcard", "checksum": {"name": "sha256", "checksum": "d12182952050ab00202c20b852a9c79a3db90bce04277d98ec64059ee8c978ef"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela dimens\u00e3o de informa\u00e7\u00f5es de cart\u00f5es de cr\u00e9dito", "columns": {"creditcard_sk": {"name": "creditcard_sk", "description": "SK da tabela dimens\u00e3o de cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creditcardid": {"name": "creditcardid", "description": "PK ID do cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cardtype": {"name": "cardtype", "description": "Nome do cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cardnumber": {"name": "cardnumber", "description": "N\u00famero do cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expmonth": {"name": "expmonth", "description": "M\u00eas de validade do cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expyear": {"name": "expyear", "description": "Ano de validade do cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/dim_creditcard.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688592026.4360642, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`dim_creditcard`", "raw_code": "with stg_salesorderheader as(\r\n    select\r\n        distinct(creditcardid)\r\n    from {{ ref('stg_salesorderheader')}}\r\n    where creditcardid is not null\r\n)\r\n\r\n, stg_creditcard as (\r\n    select \r\n        creditcardid\r\n        , cardtype\r\n        , cardnumber\r\n        , expmonth\r\n        , expyear\r\n    from {{ ref('stg_creditcard') }} \r\n    )\r\n\r\n, dim_creditcard as (\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['stg_salesorderheader.creditcardid'\r\n            , 'stg_creditcard.creditcardid']\r\n        ) }} as creditcard_sk\r\n        , stg_salesorderheader.creditcardid \r\n        , stg_creditcard.cardtype\r\n        , stg_creditcard.cardnumber\r\n        , stg_creditcard.expmonth\r\n        , stg_creditcard.expyear\r\n    from stg_salesorderheader\r\n    left join stg_creditcard on stg_salesorderheader.creditcardid = stg_creditcard.creditcardid\r\n)\r\n\r\nselect *\r\nfrom dim_creditcard", "language": "sql", "refs": [["stg_salesorderheader"], ["stg_creditcard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.stg_salesorderheader", "model.desafioaeadw.stg_creditcard"]}, "compiled_path": null}, "model.desafioaeadw.dim_salesorderheaderdetail": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "dim_salesorderheaderdetail", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/dim_salesorderheaderdetail.sql", "original_file_path": "models/marts/dim_salesorderheaderdetail.sql", "unique_id": "model.desafioaeadw.dim_salesorderheaderdetail", "fqn": ["desafioaeadw", "marts", "dim_salesorderheaderdetail"], "alias": "dim_salesorderheaderdetail", "checksum": {"name": "sha256", "checksum": "a0b87a636fbd5ebe48f651e4b63e76041cb101d8f96af36499b2f054f0eb1099"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela dimens\u00e3o que relaciona as tabelas fato salesorderheader e salesorderdetail", "columns": {"salesorder_sk": {"name": "salesorder_sk", "description": "SK da tabela dimens\u00e3o do pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderdetail_sk": {"name": "salesorderdetail_sk", "description": "SK da tabela dimens\u00e3o do produto de cada pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderid": {"name": "salesorderid", "description": "ID do pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderdetailid": {"name": "salesorderdetailid", "description": "ID do produto de cada pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/dim_salesorderheaderdetail.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688592026.465128, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`dim_salesorderheaderdetail`", "raw_code": "with dim_salesorderheaderdetail as (\r\n    select \r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['int_salesorderdetail.salesorderid']\r\n        ) }} as salesorder_sk    \r\n        , {{ dbt_utils.generate_surrogate_key (\r\n            ['int_salesorderdetail.salesorderdetailid']\r\n        ) }} as salesorderdetail_sk    \r\n        , salesorderid \r\n        , salesorderdetailid \r\n    from {{ ref('int_salesorderdetail') }}\r\n)\r\n\r\nselect *\r\nfrom dim_salesorderheaderdetail", "language": "sql", "refs": [["int_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.int_salesorderdetail"]}, "compiled_path": null}, "model.desafioaeadw.dim_customer": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "dim_customer", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/dim_customer.sql", "original_file_path": "models/marts/dim_customer.sql", "unique_id": "model.desafioaeadw.dim_customer", "fqn": ["desafioaeadw", "marts", "dim_customer"], "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "0d77ec27a9b7113eb7c709cc7f6523de377f6241a802dff55efb04e99da9a19a"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela dimens\u00e3o de informa\u00e7\u00f5es dos clientes", "columns": {"customer_sk": {"name": "customer_sk", "description": "SK da tabela dimens\u00e3o de cliente", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerid": {"name": "customerid", "description": "PK ID do cliente", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerfullname": {"name": "customerfullname", "description": "Nome completo do cliente, seja pessoa f\u00edsica ou jur\u00eddica", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/dim_customer.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688592026.5626893, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`dim_customer`", "raw_code": "with stg_salesorderheader as(\r\n    select\r\n        distinct(customerid)\r\n    from {{ ref('stg_salesorderheader')}}\r\n)\r\n\r\n, int_customer as (\r\n    select\r\n        customerid \r\n        , personid \r\n        , storeid \r\n        , territoryid \r\n        , businessentityid \r\n        , customerfullname\r\n        , storename\r\n        , salespersonid\r\n    from {{ ref('int_customer') }}    \r\n)\r\n\r\n, dim_customer as (\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['stg_salesorderheader.customerid'\r\n            , 'int_customer.customerid']\r\n        ) }} as customer_sk\r\n        , int_customer.customerid\r\n        , int_customer.customerfullname\r\n    from stg_salesorderheader\r\n    left join int_customer on stg_salesorderheader.customerid = int_customer.customerid\r\n)\r\n\r\nselect *\r\nfrom dim_customer", "language": "sql", "refs": [["stg_salesorderheader"], ["int_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.stg_salesorderheader", "model.desafioaeadw.int_customer"]}, "compiled_path": null}, "test.desafioaeadw.unique_dim_product_product_sk.2248c4335c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_sk", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_product_product_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_product_product_sk.sql", "original_file_path": "models/marts/dim_product.yml", "unique_id": "test.desafioaeadw.unique_dim_product_product_sk.2248c4335c", "fqn": ["desafioaeadw", "marts", "unique_dim_product_product_sk"], "alias": "unique_dim_product_product_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4112477, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_product"]}, "compiled_path": null, "column_name": "product_sk", "file_key_name": "models.dim_product"}, "test.desafioaeadw.not_null_dim_product_product_sk.271feb5417": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_sk", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_product_product_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_product_product_sk.sql", "original_file_path": "models/marts/dim_product.yml", "unique_id": "test.desafioaeadw.not_null_dim_product_product_sk.271feb5417", "fqn": ["desafioaeadw", "marts", "not_null_dim_product_product_sk"], "alias": "not_null_dim_product_product_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.415004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_product"]}, "compiled_path": null, "column_name": "product_sk", "file_key_name": "models.dim_product"}, "test.desafioaeadw.unique_dim_product_productid.cfdf676d85": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_product_productid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_product_productid.sql", "original_file_path": "models/marts/dim_product.yml", "unique_id": "test.desafioaeadw.unique_dim_product_productid.cfdf676d85", "fqn": ["desafioaeadw", "marts", "unique_dim_product_productid"], "alias": "unique_dim_product_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4189808, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_product"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.dim_product"}, "test.desafioaeadw.not_null_dim_product_productid.51449dfe6f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_product_productid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_product_productid.sql", "original_file_path": "models/marts/dim_product.yml", "unique_id": "test.desafioaeadw.not_null_dim_product_productid.51449dfe6f", "fqn": ["desafioaeadw", "marts", "not_null_dim_product_productid"], "alias": "not_null_dim_product_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4240198, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_product"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.dim_product"}, "test.desafioaeadw.not_null_dim_product_productname.3ba6e7fa20": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productname", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_product_productname", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_product_productname.sql", "original_file_path": "models/marts/dim_product.yml", "unique_id": "test.desafioaeadw.not_null_dim_product_productname.3ba6e7fa20", "fqn": ["desafioaeadw", "marts", "not_null_dim_product_productname"], "alias": "not_null_dim_product_productname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4287658, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_product"]}, "compiled_path": null, "column_name": "productname", "file_key_name": "models.dim_product"}, "test.desafioaeadw.unique_dim_creditcard_creditcard_sk.a512508095": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "creditcard_sk", "model": "{{ get_where_subquery(ref('dim_creditcard')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_creditcard_creditcard_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_creditcard_creditcard_sk.sql", "original_file_path": "models/marts/dim_creditcard.yml", "unique_id": "test.desafioaeadw.unique_dim_creditcard_creditcard_sk.a512508095", "fqn": ["desafioaeadw", "marts", "unique_dim_creditcard_creditcard_sk"], "alias": "unique_dim_creditcard_creditcard_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4380043, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_creditcard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_creditcard"]}, "compiled_path": null, "column_name": "creditcard_sk", "file_key_name": "models.dim_creditcard"}, "test.desafioaeadw.not_null_dim_creditcard_creditcard_sk.36d710f4d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "creditcard_sk", "model": "{{ get_where_subquery(ref('dim_creditcard')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_creditcard_creditcard_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_creditcard_creditcard_sk.sql", "original_file_path": "models/marts/dim_creditcard.yml", "unique_id": "test.desafioaeadw.not_null_dim_creditcard_creditcard_sk.36d710f4d9", "fqn": ["desafioaeadw", "marts", "not_null_dim_creditcard_creditcard_sk"], "alias": "not_null_dim_creditcard_creditcard_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4445906, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_creditcard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_creditcard"]}, "compiled_path": null, "column_name": "creditcard_sk", "file_key_name": "models.dim_creditcard"}, "test.desafioaeadw.unique_dim_creditcard_creditcardid.1f92f78ad3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(ref('dim_creditcard')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_creditcard_creditcardid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_creditcard_creditcardid.sql", "original_file_path": "models/marts/dim_creditcard.yml", "unique_id": "test.desafioaeadw.unique_dim_creditcard_creditcardid.1f92f78ad3", "fqn": ["desafioaeadw", "marts", "unique_dim_creditcard_creditcardid"], "alias": "unique_dim_creditcard_creditcardid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4486713, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_creditcard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_creditcard"]}, "compiled_path": null, "column_name": "creditcardid", "file_key_name": "models.dim_creditcard"}, "test.desafioaeadw.not_null_dim_creditcard_creditcardid.266ea33d81": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "creditcardid", "model": "{{ get_where_subquery(ref('dim_creditcard')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_creditcard_creditcardid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_creditcard_creditcardid.sql", "original_file_path": "models/marts/dim_creditcard.yml", "unique_id": "test.desafioaeadw.not_null_dim_creditcard_creditcardid.266ea33d81", "fqn": ["desafioaeadw", "marts", "not_null_dim_creditcard_creditcardid"], "alias": "not_null_dim_creditcard_creditcardid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.452724, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_creditcard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_creditcard"]}, "compiled_path": null, "column_name": "creditcardid", "file_key_name": "models.dim_creditcard"}, "test.desafioaeadw.not_null_dim_creditcard_cardnumber.6de758e948": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "cardnumber", "model": "{{ get_where_subquery(ref('dim_creditcard')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_creditcard_cardnumber", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_creditcard_cardnumber.sql", "original_file_path": "models/marts/dim_creditcard.yml", "unique_id": "test.desafioaeadw.not_null_dim_creditcard_cardnumber.6de758e948", "fqn": ["desafioaeadw", "marts", "not_null_dim_creditcard_cardnumber"], "alias": "not_null_dim_creditcard_cardnumber", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4583862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_creditcard"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_creditcard"]}, "compiled_path": null, "column_name": "cardnumber", "file_key_name": "models.dim_creditcard"}, "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorder_sk.bc4ee0c9b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorder_sk", "model": "{{ get_where_subquery(ref('dim_salesorderheaderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_salesorderheaderdetail_salesorder_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_salesorderheaderdetail_salesorder_sk.sql", "original_file_path": "models/marts/dim_salesorderheaderdetail.yml", "unique_id": "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorder_sk.bc4ee0c9b0", "fqn": ["desafioaeadw", "marts", "not_null_dim_salesorderheaderdetail_salesorder_sk"], "alias": "not_null_dim_salesorderheaderdetail_salesorder_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4670677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesorderheaderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_salesorderheaderdetail"]}, "compiled_path": null, "column_name": "salesorder_sk", "file_key_name": "models.dim_salesorderheaderdetail"}, "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetail_sk.12ac5ee767": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetail_sk", "model": "{{ get_where_subquery(ref('dim_salesorderheaderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_salesorderheaderdetail_salesorderdetail_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_salesorderheaderdetail_salesorderdetail_sk.sql", "original_file_path": "models/marts/dim_salesorderheaderdetail.yml", "unique_id": "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetail_sk.12ac5ee767", "fqn": ["desafioaeadw", "marts", "unique_dim_salesorderheaderdetail_salesorderdetail_sk"], "alias": "unique_dim_salesorderheaderdetail_salesorderdetail_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4713252, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesorderheaderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_salesorderheaderdetail"]}, "compiled_path": null, "column_name": "salesorderdetail_sk", "file_key_name": "models.dim_salesorderheaderdetail"}, "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetail_sk.4504b643b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetail_sk", "model": "{{ get_where_subquery(ref('dim_salesorderheaderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_salesorderheaderdetail_salesorderdetail_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_salesorderheaderdetail_salesorderdetail_sk.sql", "original_file_path": "models/marts/dim_salesorderheaderdetail.yml", "unique_id": "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetail_sk.4504b643b6", "fqn": ["desafioaeadw", "marts", "not_null_dim_salesorderheaderdetail_salesorderdetail_sk"], "alias": "not_null_dim_salesorderheaderdetail_salesorderdetail_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4773848, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesorderheaderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_salesorderheaderdetail"]}, "compiled_path": null, "column_name": "salesorderdetail_sk", "file_key_name": "models.dim_salesorderheaderdetail"}, "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderid.44401d0c72": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(ref('dim_salesorderheaderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_salesorderheaderdetail_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_salesorderheaderdetail_salesorderid.sql", "original_file_path": "models/marts/dim_salesorderheaderdetail.yml", "unique_id": "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderid.44401d0c72", "fqn": ["desafioaeadw", "marts", "not_null_dim_salesorderheaderdetail_salesorderid"], "alias": "not_null_dim_salesorderheaderdetail_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.481778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesorderheaderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_salesorderheaderdetail"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "models.dim_salesorderheaderdetail"}, "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetailid.c309577c63": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(ref('dim_salesorderheaderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_salesorderheaderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_salesorderheaderdetail_salesorderdetailid.sql", "original_file_path": "models/marts/dim_salesorderheaderdetail.yml", "unique_id": "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetailid.c309577c63", "fqn": ["desafioaeadw", "marts", "unique_dim_salesorderheaderdetail_salesorderdetailid"], "alias": "unique_dim_salesorderheaderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4855063, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesorderheaderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_salesorderheaderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "models.dim_salesorderheaderdetail"}, "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetailid.68349e6e2d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(ref('dim_salesorderheaderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_salesorderheaderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_salesorderheaderdetail_salesorderdetailid.sql", "original_file_path": "models/marts/dim_salesorderheaderdetail.yml", "unique_id": "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetailid.68349e6e2d", "fqn": ["desafioaeadw", "marts", "not_null_dim_salesorderheaderdetail_salesorderdetailid"], "alias": "not_null_dim_salesorderheaderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.4918926, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesorderheaderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_salesorderheaderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "models.dim_salesorderheaderdetail"}, "test.desafioaeadw.unique_dim_customer_customer_sk.c225f6f263": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_sk", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_customer_customer_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_customer_customer_sk.sql", "original_file_path": "models/marts/dim_customer.yml", "unique_id": "test.desafioaeadw.unique_dim_customer_customer_sk.c225f6f263", "fqn": ["desafioaeadw", "marts", "unique_dim_customer_customer_sk"], "alias": "unique_dim_customer_customer_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.5647125, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_customer"]}, "compiled_path": null, "column_name": "customer_sk", "file_key_name": "models.dim_customer"}, "test.desafioaeadw.not_null_dim_customer_customer_sk.69b9dd095b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_sk", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_customer_customer_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_customer_customer_sk.sql", "original_file_path": "models/marts/dim_customer.yml", "unique_id": "test.desafioaeadw.not_null_dim_customer_customer_sk.69b9dd095b", "fqn": ["desafioaeadw", "marts", "not_null_dim_customer_customer_sk"], "alias": "not_null_dim_customer_customer_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.5700088, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_customer"]}, "compiled_path": null, "column_name": "customer_sk", "file_key_name": "models.dim_customer"}, "test.desafioaeadw.unique_dim_customer_customerid.04913d3698": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_customer_customerid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_customer_customerid.sql", "original_file_path": "models/marts/dim_customer.yml", "unique_id": "test.desafioaeadw.unique_dim_customer_customerid.04913d3698", "fqn": ["desafioaeadw", "marts", "unique_dim_customer_customerid"], "alias": "unique_dim_customer_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.5767233, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_customer"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "models.dim_customer"}, "test.desafioaeadw.not_null_dim_customer_customerid.4d829c4322": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_customer_customerid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_customer_customerid.sql", "original_file_path": "models/marts/dim_customer.yml", "unique_id": "test.desafioaeadw.not_null_dim_customer_customerid.4d829c4322", "fqn": ["desafioaeadw", "marts", "not_null_dim_customer_customerid"], "alias": "not_null_dim_customer_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.5805254, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_customer"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "models.dim_customer"}, "test.desafioaeadw.not_null_dim_customer_customerfullname.7cf124b52b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerfullname", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_customer_customerfullname", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_customer_customerfullname.sql", "original_file_path": "models/marts/dim_customer.yml", "unique_id": "test.desafioaeadw.not_null_dim_customer_customerfullname.7cf124b52b", "fqn": ["desafioaeadw", "marts", "not_null_dim_customer_customerfullname"], "alias": "not_null_dim_customer_customerfullname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592026.5846632, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_customer"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_customer"]}, "compiled_path": null, "column_name": "customerfullname", "file_key_name": "models.dim_customer"}, "model.desafioaeadw.dim_location": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "dim_location", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/dim_location.sql", "original_file_path": "models/marts/dim_location.sql", "unique_id": "model.desafioaeadw.dim_location", "fqn": ["desafioaeadw", "marts", "dim_location"], "alias": "dim_location", "checksum": {"name": "sha256", "checksum": "7fe3851726189de16c6ac9cc9d8a2c646e5a6a8a8ea8ccf75191e4b5a779d20f"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela dimens\u00e3o de informa\u00e7\u00f5es de endere\u00e7os", "columns": {"shiptoaddress_sk": {"name": "shiptoaddress_sk", "description": "SK da tabela dimens\u00e3o do endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shiptoaddressid": {"name": "shiptoaddressid", "description": "PK ID do endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addressline1": {"name": "addressline1", "description": "Nome da rua do endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "Nome da cidade do endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postalcode": {"name": "postalcode", "description": "N\u00famero do CEP do endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statename": {"name": "statename", "description": "Nome do estado do endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "countryname": {"name": "countryname", "description": "Nome do pa\u00eds do endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/dim_location.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688592599.6611614, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`dim_location`", "raw_code": "with stg_salesorderheader as(\r\n    select\r\n        distinct(shiptoaddressid)\r\n    from {{ ref('stg_salesorderheader')}}\r\n)\r\n\r\n, int_location as (\r\n    select\r\n        addressid \r\n\t    , addressline1\r\n\t    , addressline2 \r\n\t    , city \r\n\t    , stateprovinceid \r\n\t    , postalcode \r\n\t    , stateprovincecode \r\n\t    , countryregioncode \r\n\t    , statename\r\n\t    , territoryid\r\n\t    , countryname\r\n    from {{ ref('int_location') }}\r\n)\r\n\r\n, dim_location as (\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['stg_salesorderheader.shiptoaddressid'\r\n            , 'int_location.addressid']\r\n        ) }} as shiptoaddress_sk\r\n\t\t, addressid as shiptoaddressid\r\n\t    , int_location.addressline1\r\n\t    , int_location.city \r\n\t    , int_location.postalcode \r\n\t    , int_location.statename\r\n\t    , int_location.countryname\r\n    from stg_salesorderheader\r\n    left join int_location on stg_salesorderheader.shiptoaddressid = int_location.addressid\r\n)\r\n\r\nselect *\r\nfrom dim_location", "language": "sql", "refs": [["stg_salesorderheader"], ["int_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.stg_salesorderheader", "model.desafioaeadw.int_location"]}, "compiled_path": null}, "test.desafioaeadw.unique_dim_location_shiptoaddress_sk.c3668ed444": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "shiptoaddress_sk", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_location_shiptoaddress_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_location_shiptoaddress_sk.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.unique_dim_location_shiptoaddress_sk.c3668ed444", "fqn": ["desafioaeadw", "marts", "unique_dim_location_shiptoaddress_sk"], "alias": "unique_dim_location_shiptoaddress_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.6857915, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "shiptoaddress_sk", "file_key_name": "models.dim_location"}, "test.desafioaeadw.not_null_dim_location_shiptoaddress_sk.1e02703fae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shiptoaddress_sk", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_location_shiptoaddress_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_location_shiptoaddress_sk.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.not_null_dim_location_shiptoaddress_sk.1e02703fae", "fqn": ["desafioaeadw", "marts", "not_null_dim_location_shiptoaddress_sk"], "alias": "not_null_dim_location_shiptoaddress_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.6911728, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "shiptoaddress_sk", "file_key_name": "models.dim_location"}, "test.desafioaeadw.unique_dim_location_shiptoaddressid.79c9ecfbfb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "shiptoaddressid", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_location_shiptoaddressid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_location_shiptoaddressid.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.unique_dim_location_shiptoaddressid.79c9ecfbfb", "fqn": ["desafioaeadw", "marts", "unique_dim_location_shiptoaddressid"], "alias": "unique_dim_location_shiptoaddressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.6986217, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "shiptoaddressid", "file_key_name": "models.dim_location"}, "test.desafioaeadw.not_null_dim_location_shiptoaddressid.1c50ad8e6e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shiptoaddressid", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_location_shiptoaddressid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_location_shiptoaddressid.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.not_null_dim_location_shiptoaddressid.1c50ad8e6e", "fqn": ["desafioaeadw", "marts", "not_null_dim_location_shiptoaddressid"], "alias": "not_null_dim_location_shiptoaddressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.7031524, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "shiptoaddressid", "file_key_name": "models.dim_location"}, "test.desafioaeadw.not_null_dim_location_addressline1.307d00b012": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "addressline1", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_location_addressline1", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_location_addressline1.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.not_null_dim_location_addressline1.307d00b012", "fqn": ["desafioaeadw", "marts", "not_null_dim_location_addressline1"], "alias": "not_null_dim_location_addressline1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.708388, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "addressline1", "file_key_name": "models.dim_location"}, "test.desafioaeadw.not_null_dim_location_city.9914acb951": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_location_city", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_location_city.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.not_null_dim_location_city.9914acb951", "fqn": ["desafioaeadw", "marts", "not_null_dim_location_city"], "alias": "not_null_dim_location_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.7118359, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "city", "file_key_name": "models.dim_location"}, "test.desafioaeadw.not_null_dim_location_postalcode.cfef3ef752": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "postalcode", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_location_postalcode", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_location_postalcode.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.not_null_dim_location_postalcode.cfef3ef752", "fqn": ["desafioaeadw", "marts", "not_null_dim_location_postalcode"], "alias": "not_null_dim_location_postalcode", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.7161665, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "postalcode", "file_key_name": "models.dim_location"}, "test.desafioaeadw.not_null_dim_location_statename.1e037cf69d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "statename", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_location_statename", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_location_statename.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.not_null_dim_location_statename.1e037cf69d", "fqn": ["desafioaeadw", "marts", "not_null_dim_location_statename"], "alias": "not_null_dim_location_statename", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.7199233, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "statename", "file_key_name": "models.dim_location"}, "test.desafioaeadw.not_null_dim_location_countryname.b81275aa54": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "countryname", "model": "{{ get_where_subquery(ref('dim_location')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_dim_location_countryname", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_dim_location_countryname.sql", "original_file_path": "models/marts/dim_location.yml", "unique_id": "test.desafioaeadw.not_null_dim_location_countryname.b81275aa54", "fqn": ["desafioaeadw", "marts", "not_null_dim_location_countryname"], "alias": "not_null_dim_location_countryname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688592599.723345, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_location"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.dim_location"]}, "compiled_path": null, "column_name": "countryname", "file_key_name": "models.dim_location"}, "model.desafioaeadw.dim_salesreason": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "dim_salesreason", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/dim_salesreason.sql", "original_file_path": "models/marts/dim_salesreason.sql", "unique_id": "model.desafioaeadw.dim_salesreason", "fqn": ["desafioaeadw", "marts", "dim_salesreason"], "alias": "dim_salesreason", "checksum": {"name": "sha256", "checksum": "fc2dfbb3271e04b603382c8e1869ff8da8d0d6f62c026ccf24d075bde9c9828a"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela dimens\u00e3o de informa\u00e7\u00f5es do motivo de venda", "columns": {"reason_sk": {"name": "reason_sk", "description": "SK da tabela dimens\u00e3o do motivo de venda", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderid": {"name": "salesorderid", "description": "PK ID do motivo de venda", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reasonname": {"name": "reasonname", "description": "Nome do motivo de venda. Quando existem mais de um motivo de venda, os valores s\u00e3o agregados", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/dim_salesreason.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688594164.4389474, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`dim_salesreason`", "raw_code": "with stg_salesorderheader as(\r\n    select\r\n        distinct(salesorderid)\r\n    from {{ ref('stg_salesorderheader')}}\r\n)\r\n\r\n, int_salesreason as (\r\n    select \r\n        salesreasonid\r\n        , salesorderid\r\n        , reasonname\r\n        , reasontype\r\n    from {{ ref('int_salesreason') }} \r\n)\r\n\r\n, dim_salesreason as (\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['stg_salesorderheader.salesorderid'\r\n            , 'int_salesreason.salesorderid']\r\n        ) }} as reason_sk       \r\n        , int_salesreason.salesorderid\r\n        , string_agg(int_salesreason.reasonname, ', ') as reasonname\r\n    from stg_salesorderheader\r\n    left join int_salesreason on stg_salesorderheader.salesorderid = int_salesreason.salesorderid\r\n    group by int_salesreason.salesorderid, stg_salesorderheader.salesorderid\r\n)\r\n\r\nselect *\r\nfrom dim_salesreason", "language": "sql", "refs": [["stg_salesorderheader"], ["int_salesreason"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.stg_salesorderheader", "model.desafioaeadw.int_salesreason"]}, "compiled_path": null}, "test.desafioaeadw.unique_dim_salesreason_reason_sk.4ff00b898d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "reason_sk", "model": "{{ get_where_subquery(ref('dim_salesreason')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_salesreason_reason_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_salesreason_reason_sk.sql", "original_file_path": "models/marts/dim_salesreason.yml", "unique_id": "test.desafioaeadw.unique_dim_salesreason_reason_sk.4ff00b898d", "fqn": ["desafioaeadw", "marts", "unique_dim_salesreason_reason_sk"], "alias": "unique_dim_salesreason_reason_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688594164.4748282, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesreason"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_salesreason"]}, "compiled_path": null, "column_name": "reason_sk", "file_key_name": "models.dim_salesreason"}, "test.desafioaeadw.unique_dim_salesreason_salesorderid.9e51ba16b7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(ref('dim_salesreason')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_dim_salesreason_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_dim_salesreason_salesorderid.sql", "original_file_path": "models/marts/dim_salesreason.yml", "unique_id": "test.desafioaeadw.unique_dim_salesreason_salesorderid.9e51ba16b7", "fqn": ["desafioaeadw", "marts", "unique_dim_salesreason_salesorderid"], "alias": "unique_dim_salesreason_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688594164.4808416, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["dim_salesreason"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.dim_salesreason"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "models.dim_salesreason"}, "model.desafioaeadw.fct_salesorderheader": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "fct_salesorderheader", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/fct_salesorderheader.sql", "original_file_path": "models/marts/fct_salesorderheader.sql", "unique_id": "model.desafioaeadw.fct_salesorderheader", "fqn": ["desafioaeadw", "marts", "fct_salesorderheader"], "alias": "fct_salesorderheader", "checksum": {"name": "sha256", "checksum": "b9e2430d618b073c2a739b2538a649e78d5fa7c4e1260e190ac84372d0227c54"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela de informa\u00e7\u00f5es gerais do pedido", "columns": {"salesorderheader_sk": {"name": "salesorderheader_sk", "description": "SK de cada pedido realizado", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_fk": {"name": "customer_fk", "description": "FK da tabela dimens\u00e3o de cliente", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shiptoaddress_fk": {"name": "shiptoaddress_fk", "description": "FK da tabela dimens\u00e3o de endere\u00e7o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creditcard_fk": {"name": "creditcard_fk", "description": "FK da tabela dimens\u00e3o de cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorder_fk": {"name": "salesorder_fk", "description": "FK da tabela dimens\u00e3o que relaciona esta com a outra tabela fato", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderid": {"name": "salesorderid", "description": "ID \u00fanica de cada pedido realizado", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orderdate": {"name": "orderdate", "description": "Data em que o cliente fez o pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipdate": {"name": "shipdate", "description": "Data do envio do pedido ao cliente", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orderstatus": {"name": "orderstatus", "description": "Status do pedido, que pode ser: \"In_process\", \"Approved\", \"Backordered\", \"Rejected\", \"Shipped\", \"Cancelled\", \"No status\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerid": {"name": "customerid", "description": "ID do cliente que fez o pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salespersonid": {"name": "salespersonid", "description": "ID do vendedor", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billtoaddressid": {"name": "billtoaddressid", "description": "Endere\u00e7o de cobran\u00e7a", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shiptoaddressid": {"name": "shiptoaddressid", "description": "Endere\u00e7o de entrega do pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipmethodid": {"name": "shipmethodid", "description": "Forma de envio do pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creditcardid": {"name": "creditcardid", "description": "ID do cart\u00e3o de cr\u00e9dito", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Faturamento l\u00edquido do pedido, que \u00e9 o faturamento bruto menos descontos", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxamt": {"name": "taxamt", "description": "Taxa incidente sobre o pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freight": {"name": "freight", "description": "Frete para envio do pedido", "meta": {}, "data_type": null, "quote": null, "tags": []}, "totaldue": {"name": "totaldue", "description": "Valor total por pedido, que \u00e9 a soma do faturamento l\u00edquido, da taxa e do frete", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/fct_salesorderheader.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688605735.8604586, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`fct_salesorderheader`", "raw_code": "with dim_customer as (\r\n    select\r\n        customer_sk\r\n        , customerid\r\n    from {{ ref('dim_customer')}}\r\n)\r\n\r\n, dim_location as(\r\n    select\r\n        shiptoaddress_sk\r\n        , shiptoaddressid\r\n    from {{ ref('dim_location')}}        \r\n)\r\n\r\n, dim_creditcard as(\r\n    select\r\n        creditcard_sk\r\n        , creditcardid\r\n    from {{ ref('dim_creditcard')}}        \r\n)\r\n\r\n\r\n, dim_salesorderheaderdetail as (\r\n    select *\r\n    from {{ ref('dim_salesorderheaderdetail')}}\r\n)\r\n\r\n, stg_salesorderheader as (\r\n    select \r\n        salesorderid\r\n        , orderdate \r\n        , shipdate \r\n        , case\r\n            when orderstatus = 1 then 'In_process'\r\n            when orderstatus = 2 then 'Approved'\r\n            when orderstatus = 3 then 'Backordered' \r\n            when orderstatus = 4 then 'Rejected' \r\n            when orderstatus = 5 then 'Shipped'\r\n            when orderstatus = 6 then 'Cancelled' \r\n            else 'No status'\r\n        end as orderstatus\r\n        , customerid \r\n        , salespersonid \r\n        , billtoaddressid \r\n        , shiptoaddressid\r\n        , shipmethodid \r\n        , creditcardid\r\n        , subtotal \r\n        , taxamt\r\n        , freight \r\n        , totaldue \r\n    from {{  ref('stg_salesorderheader')  }}\r\n)\r\n\r\n, fct_salesorderheader as (\r\n    select \r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['dim_salesorderheaderdetail.salesorderid'\r\n            , 'stg_salesorderheader.salesorderid']\r\n        ) }} as salesorderheader_sk \r\n        , dim_customer.customerid as customer_fk\r\n        , dim_location.shiptoaddressid as shiptoaddress_fk\r\n        , dim_creditcard.creditcardid as creditcard_fk\r\n        , dim_salesorderheaderdetail.salesorderid as salesorder_fk\r\n        , stg_salesorderheader.salesorderid \r\n        , stg_salesorderheader.orderdate \r\n        , stg_salesorderheader.shipdate \r\n        , stg_salesorderheader.orderstatus\r\n        , stg_salesorderheader.customerid \r\n        , stg_salesorderheader.salespersonid \r\n        , stg_salesorderheader.billtoaddressid \r\n        , stg_salesorderheader.shiptoaddressid\r\n        , stg_salesorderheader.shipmethodid \r\n        , stg_salesorderheader.creditcardid\r\n        , stg_salesorderheader.subtotal \r\n        , stg_salesorderheader.taxamt\r\n        , stg_salesorderheader.freight \r\n        , stg_salesorderheader.totaldue \r\n    from stg_salesorderheader\r\n    left join dim_location on stg_salesorderheader.shiptoaddressid = dim_location.shiptoaddressid\r\n    left join dim_customer on stg_salesorderheader.customerid = dim_customer.customerid\r\n    left join dim_creditcard on stg_salesorderheader.creditcardid = dim_creditcard.creditcardid\r\n    left join dim_salesorderheaderdetail on stg_salesorderheader.salesorderid = dim_salesorderheaderdetail.salesorderid\r\n)\r\n\r\nselect *\r\nfrom fct_salesorderheader", "language": "sql", "refs": [["dim_customer"], ["dim_location"], ["dim_creditcard"], ["dim_salesorderheaderdetail"], ["stg_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.dim_customer", "model.desafioaeadw.dim_location", "model.desafioaeadw.dim_creditcard", "model.desafioaeadw.dim_salesorderheaderdetail", "model.desafioaeadw.stg_salesorderheader"]}, "compiled_path": null}, "test.desafioaeadw.unique_fct_salesorderheader_salesorderheader_sk.eba1ec9273": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderheader_sk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderheader_salesorderheader_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderheader_salesorderheader_sk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderheader_salesorderheader_sk.eba1ec9273", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderheader_salesorderheader_sk"], "alias": "unique_fct_salesorderheader_salesorderheader_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.877444, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "salesorderheader_sk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_salesorderheader_sk.c96614979d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderheader_sk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_salesorderheader_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_salesorderheader_sk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_salesorderheader_sk.c96614979d", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_salesorderheader_sk"], "alias": "not_null_fct_salesorderheader_salesorderheader_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.8805277, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "salesorderheader_sk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.unique_fct_salesorderheader_customer_fk.e29bb9f882": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderheader_customer_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderheader_customer_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderheader_customer_fk.e29bb9f882", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderheader_customer_fk"], "alias": "unique_fct_salesorderheader_customer_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.8836923, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "customer_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_customer_fk.6d443d86cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_customer_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_customer_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_customer_fk.6d443d86cb", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_customer_fk"], "alias": "not_null_fct_salesorderheader_customer_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.8865118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "customer_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.unique_fct_salesorderheader_shiptoaddress_fk.6f2af8c019": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "shiptoaddress_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderheader_shiptoaddress_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderheader_shiptoaddress_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderheader_shiptoaddress_fk.6f2af8c019", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderheader_shiptoaddress_fk"], "alias": "unique_fct_salesorderheader_shiptoaddress_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.8893466, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "shiptoaddress_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddress_fk.14c88201c6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shiptoaddress_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_shiptoaddress_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_shiptoaddress_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddress_fk.14c88201c6", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_shiptoaddress_fk"], "alias": "not_null_fct_salesorderheader_shiptoaddress_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.892571, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "shiptoaddress_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.unique_fct_salesorderheader_creditcard_fk.9679ec4441": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "creditcard_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderheader_creditcard_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderheader_creditcard_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderheader_creditcard_fk.9679ec4441", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderheader_creditcard_fk"], "alias": "unique_fct_salesorderheader_creditcard_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.8957434, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "creditcard_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_creditcard_fk.5c187fcac6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "creditcard_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_creditcard_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_creditcard_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_creditcard_fk.5c187fcac6", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_creditcard_fk"], "alias": "not_null_fct_salesorderheader_creditcard_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.898559, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "creditcard_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.unique_fct_salesorderheader_salesorder_fk.be3f977e9d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorder_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderheader_salesorder_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderheader_salesorder_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderheader_salesorder_fk.be3f977e9d", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderheader_salesorder_fk"], "alias": "unique_fct_salesorderheader_salesorder_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9014163, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "salesorder_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_salesorder_fk.e9e4819509": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorder_fk", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_salesorder_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_salesorder_fk.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_salesorder_fk.e9e4819509", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_salesorder_fk"], "alias": "not_null_fct_salesorderheader_salesorder_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9042363, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "salesorder_fk", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.unique_fct_salesorderheader_salesorderid.0dd57120ec": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderheader_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderheader_salesorderid.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderheader_salesorderid.0dd57120ec", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderheader_salesorderid"], "alias": "unique_fct_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.907296, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_salesorderid.2509037bb9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderid", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_salesorderid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_salesorderid.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_salesorderid.2509037bb9", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_salesorderid"], "alias": "not_null_fct_salesorderheader_salesorderid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9103806, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "salesorderid", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_orderdate.f518b63fc1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "orderdate", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_orderdate", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_orderdate.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_orderdate.f518b63fc1", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_orderdate"], "alias": "not_null_fct_salesorderheader_orderdate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9132152, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "orderdate", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_shipdate.2f4cfe4de9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipdate", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_shipdate", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_shipdate.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_shipdate.2f4cfe4de9", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_shipdate"], "alias": "not_null_fct_salesorderheader_shipdate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9160247, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "shipdate", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_orderstatus.a63390182a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "orderstatus", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_orderstatus", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_orderstatus.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_orderstatus.a63390182a", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_orderstatus"], "alias": "not_null_fct_salesorderheader_orderstatus", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.918749, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "orderstatus", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_customerid.e2f510e56d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_customerid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_customerid.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_customerid.e2f510e56d", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_customerid"], "alias": "not_null_fct_salesorderheader_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9219449, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_billtoaddressid.d097145e60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "billtoaddressid", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_billtoaddressid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_billtoaddressid.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_billtoaddressid.d097145e60", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_billtoaddressid"], "alias": "not_null_fct_salesorderheader_billtoaddressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9247613, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "billtoaddressid", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddressid.8b4ab7a541": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shiptoaddressid", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_shiptoaddressid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_shiptoaddressid.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddressid.8b4ab7a541", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_shiptoaddressid"], "alias": "not_null_fct_salesorderheader_shiptoaddressid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9276938, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "shiptoaddressid", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_shipmethodid.3fbedc176c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "shipmethodid", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_shipmethodid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_shipmethodid.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_shipmethodid.3fbedc176c", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_shipmethodid"], "alias": "not_null_fct_salesorderheader_shipmethodid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9305315, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "shipmethodid", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_subtotal.3a7bdcfa1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtotal", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_subtotal", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_subtotal.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_subtotal.3a7bdcfa1c", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_subtotal"], "alias": "not_null_fct_salesorderheader_subtotal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9334302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "subtotal", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_taxamt.8263c5d068": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "taxamt", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_taxamt", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_taxamt.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_taxamt.8263c5d068", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_taxamt"], "alias": "not_null_fct_salesorderheader_taxamt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9365427, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "taxamt", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_freight.152d6a800b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "freight", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_freight", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_freight.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_freight.152d6a800b", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_freight"], "alias": "not_null_fct_salesorderheader_freight", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.9396677, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "freight", "file_key_name": "models.fct_salesorderheader"}, "test.desafioaeadw.not_null_fct_salesorderheader_totaldue.b297633b24": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "totaldue", "model": "{{ get_where_subquery(ref('fct_salesorderheader')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderheader_totaldue", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderheader_totaldue.sql", "original_file_path": "models/marts/fct_salesorderheader.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderheader_totaldue.b297633b24", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderheader_totaldue"], "alias": "not_null_fct_salesorderheader_totaldue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688605735.942663, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderheader"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderheader"]}, "compiled_path": null, "column_name": "totaldue", "file_key_name": "models.fct_salesorderheader"}, "model.desafioaeadw.fct_salesorderdetail": {"database": "desafioaeadw", "schema": "dbt_cintia_marts", "name": "fct_salesorderdetail", "resource_type": "model", "package_name": "desafioaeadw", "path": "marts/fct_salesorderdetail.sql", "original_file_path": "models/marts/fct_salesorderdetail.sql", "unique_id": "model.desafioaeadw.fct_salesorderdetail", "fqn": ["desafioaeadw", "marts", "fct_salesorderdetail"], "alias": "fct_salesorderdetail", "checksum": {"name": "sha256", "checksum": "0a3f0da9667380efe6ba2567969f4075801b10b713914cd95d7c40cfe753ec9d"}, "config": {"enabled": true, "alias": null, "schema": "marts", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Tabela de informa\u00e7\u00f5es detalhadas dos pedidos, por produto", "columns": {"salesorderdetail_sk": {"name": "salesorderdetail_sk", "description": "SK do item por pedido realizado", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_fk": {"name": "product_fk", "description": "FK da tabela dimens\u00e3o de produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderdetailid_fk": {"name": "salesorderdetailid_fk", "description": "FK da tabela dimens\u00e3o que relaciona esta fato com a outra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderdetailid": {"name": "salesorderdetailid", "description": "ID \u00fanico do item por pedido realizado", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orderqty": {"name": "orderqty", "description": "Quantidade comprada por produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productid": {"name": "productid", "description": "ID do produto comprado", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unitprice": {"name": "unitprice", "description": "Pre\u00e7o unit\u00e1rio do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unitpricediscount": {"name": "unitpricediscount", "description": "Desconto unit\u00e1rio do produto", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grossrevenue": {"name": "grossrevenue", "description": "Coluna criada com o c\u00e1lculo do faturamento bruto por item do pedido, que \u00e9 a multiplica\u00e7\u00e3o de pre\u00e7o unit\u00e1rio (unitpricediscount) e quantidade (orderqty)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount": {"name": "discount", "description": "Coluna criada com o c\u00e1lculo do valor descontado por item do pedido, que \u00e9 a multiplica\u00e7\u00e3o multiplica\u00e7\u00e3o de pre\u00e7o unit\u00e1rio (unitpricediscount), da quantidade (orderqty) e da taxa de desconto (unitpricediscount)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "desafioaeadw://models/marts/fct_salesorderdetail.yml", "build_path": "target/run/desafioaeadw/models/marts/fct_salesorderdetail.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "marts"}, "created_at": 1688606210.3677025, "relation_name": "`desafioaeadw`.`dbt_cintia_marts`.`fct_salesorderdetail`", "raw_code": "with dim_product as (\r\n    select\r\n        product_sk\r\n        , productid\r\n    from {{ ref('dim_product')}}\r\n)\r\n\r\n, dim_salesorderheaderdetail as (\r\n    select *\r\n    from {{ ref('dim_salesorderheaderdetail')}}\r\n)\r\n\r\n, int_salesorderdetail as (\r\n    select  \r\n        salesorderdetailid\r\n        , orderqty\r\n        , productid\r\n        , unitprice\r\n        , unitpricediscount\r\n        , grossrevenue\r\n        , discount\r\n    from {{ ref('int_salesorderdetail') }}\r\n)\r\n\r\n, fct_salesorderdetail as (\r\n    select\r\n        {{ dbt_utils.generate_surrogate_key (\r\n            ['dim_salesorderheaderdetail.salesorderdetailid'\r\n            , 'int_salesorderdetail.salesorderdetailid']\r\n        ) }} as salesorderdetail_sk        \r\n        , dim_product.productid as product_fk\r\n        , dim_salesorderheaderdetail.salesorderdetailid as salesorderdetail_fk\r\n        , int_salesorderdetail.productid\r\n        , int_salesorderdetail.salesorderdetailid\r\n        , int_salesorderdetail.orderqty\r\n        , int_salesorderdetail.unitprice\r\n        , int_salesorderdetail.unitpricediscount\r\n        , int_salesorderdetail.grossrevenue\r\n        , int_salesorderdetail.discount\r\n    from int_salesorderdetail\r\n    left join dim_product on int_salesorderdetail.productid = dim_product.productid\r\n    left join dim_salesorderheaderdetail on int_salesorderdetail.salesorderdetailid = dim_salesorderheaderdetail.salesorderdetailid\r\n)\r\n\r\nselect *\r\nfrom fct_salesorderdetail", "language": "sql", "refs": [["dim_product"], ["dim_salesorderheaderdetail"], ["int_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.desafioaeadw.dim_product", "model.desafioaeadw.dim_salesorderheaderdetail", "model.desafioaeadw.int_salesorderdetail"]}, "compiled_path": "target/compiled/desafioaeadw/models/marts/fct_salesorderdetail.sql", "compiled": true, "compiled_code": "with dim_product as (\n    select\n        product_sk\n        , productid\n    from `desafioaeadw`.`dbt_cintia_marts`.`dim_product`\n)\n\n, dim_salesorderheaderdetail as (\n    select *\n    from `desafioaeadw`.`dbt_cintia_marts`.`dim_salesorderheaderdetail`\n)\n\n, int_salesorderdetail as (\n    select  \n        salesorderdetailid\n        , orderqty\n        , productid\n        , unitprice\n        , unitpricediscount\n        , grossrevenue\n        , discount\n    from `desafioaeadw`.`dbt_cintia_intermediate`.`int_salesorderdetail`\n)\n\n, fct_salesorderdetail as (\n    select\n        to_hex(md5(cast(coalesce(cast(dim_salesorderheaderdetail.salesorderdetailid as STRING), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(int_salesorderdetail.salesorderdetailid as STRING), '_dbt_utils_surrogate_key_null_') as STRING))) as salesorderdetail_sk        \n        , dim_product.productid as product_fk\n        , dim_salesorderheaderdetail.salesorderdetailid as salesorderdetail_fk\n        , int_salesorderdetail.productid\n        , int_salesorderdetail.salesorderdetailid\n        , int_salesorderdetail.orderqty\n        , int_salesorderdetail.unitprice\n        , int_salesorderdetail.unitpricediscount\n        , int_salesorderdetail.grossrevenue\n        , int_salesorderdetail.discount\n    from int_salesorderdetail\n    left join dim_product on int_salesorderdetail.productid = dim_product.productid\n    left join dim_salesorderheaderdetail on int_salesorderdetail.salesorderdetailid = dim_salesorderheaderdetail.salesorderdetailid\n)\n\nselect *\nfrom fct_salesorderdetail", "extra_ctes_injected": true, "extra_ctes": []}, "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetail_sk.9e8ff90475": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetail_sk", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderdetail_salesorderdetail_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderdetail_salesorderdetail_sk.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetail_sk.9e8ff90475", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderdetail_salesorderdetail_sk"], "alias": "unique_fct_salesorderdetail_salesorderdetail_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.3897264, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetail_sk", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetail_sk.c134b32084": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetail_sk", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_salesorderdetail_sk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_salesorderdetail_sk.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetail_sk.c134b32084", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_salesorderdetail_sk"], "alias": "not_null_fct_salesorderdetail_salesorderdetail_sk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.3938246, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetail_sk", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.unique_fct_salesorderdetail_product_fk.efae990ba4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_fk", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderdetail_product_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderdetail_product_fk.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderdetail_product_fk.efae990ba4", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderdetail_product_fk"], "alias": "unique_fct_salesorderdetail_product_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.3976398, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "product_fk", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_product_fk.af7ffc2145": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_fk", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_product_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_product_fk.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_product_fk.af7ffc2145", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_product_fk"], "alias": "not_null_fct_salesorderdetail_product_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.4019523, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "product_fk", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid_fk.7f8648ae81": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetailid_fk", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderdetail_salesorderdetailid_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderdetail_salesorderdetailid_fk.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid_fk.7f8648ae81", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderdetail_salesorderdetailid_fk"], "alias": "unique_fct_salesorderdetail_salesorderdetailid_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.405994, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid_fk", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid_fk.8ad79ba89f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetailid_fk", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_salesorderdetailid_fk", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_salesorderdetailid_fk.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid_fk.8ad79ba89f", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_salesorderdetailid_fk"], "alias": "not_null_fct_salesorderdetail_salesorderdetailid_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.409756, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid_fk", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid.53d2cc6f6e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "unique_fct_salesorderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaeadw", "path": "unique_fct_salesorderdetail_salesorderdetailid.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid.53d2cc6f6e", "fqn": ["desafioaeadw", "marts", "unique_fct_salesorderdetail_salesorderdetailid"], "alias": "unique_fct_salesorderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.4135547, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid.de3d90fbfc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "salesorderdetailid", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_salesorderdetailid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_salesorderdetailid.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid.de3d90fbfc", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_salesorderdetailid"], "alias": "not_null_fct_salesorderdetail_salesorderdetailid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.4176805, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "salesorderdetailid", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_orderqty.12dec7c8bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "orderqty", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_orderqty", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_orderqty.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_orderqty.12dec7c8bf", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_orderqty"], "alias": "not_null_fct_salesorderdetail_orderqty", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.421809, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "orderqty", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_productid.efda273e68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_productid", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_productid.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_productid.efda273e68", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_productid"], "alias": "not_null_fct_salesorderdetail_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.425482, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_unitprice.057c29563b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unitprice", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_unitprice", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_unitprice.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_unitprice.057c29563b", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_unitprice"], "alias": "not_null_fct_salesorderdetail_unitprice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.4291666, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "unitprice", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_unitpricediscount.518a88604e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unitpricediscount", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_unitpricediscount", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_unitpricediscount.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_unitpricediscount.518a88604e", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_unitpricediscount"], "alias": "not_null_fct_salesorderdetail_unitpricediscount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.4334166, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "unitpricediscount", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_grossrevenue.7abc7eef52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "grossrevenue", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_grossrevenue", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_grossrevenue.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_grossrevenue.7abc7eef52", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_grossrevenue"], "alias": "not_null_fct_salesorderdetail_grossrevenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.4371738, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "grossrevenue", "file_key_name": "models.fct_salesorderdetail"}, "test.desafioaeadw.not_null_fct_salesorderdetail_discount.b1dbe799a8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "discount", "model": "{{ get_where_subquery(ref('fct_salesorderdetail')) }}"}, "namespace": null}, "database": "desafioaeadw", "schema": "dbt_cintia_dbt_test__audit", "name": "not_null_fct_salesorderdetail_discount", "resource_type": "test", "package_name": "desafioaeadw", "path": "not_null_fct_salesorderdetail_discount.sql", "original_file_path": "models/marts/fct_salesorderdetail.yml", "unique_id": "test.desafioaeadw.not_null_fct_salesorderdetail_discount.b1dbe799a8", "fqn": ["desafioaeadw", "marts", "not_null_fct_salesorderdetail_discount"], "alias": "not_null_fct_salesorderdetail_discount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688606210.4412944, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["fct_salesorderdetail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.desafioaeadw.fct_salesorderdetail"]}, "compiled_path": null, "column_name": "discount", "file_key_name": "models.fct_salesorderdetail"}}, "sources": {"source.desafioaeadw.dbt_cintia.address": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "address", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.address", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "address"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "address", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es de ruas e cidades", "columns": {"addressid": {"name": "addressid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`address`", "created_at": 1687911896.4485595}, "source.desafioaeadw.dbt_cintia.countryregion": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "countryregion", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.countryregion", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "countryregion"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "countryregion", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es de pa\u00edses e regi\u00f5es", "columns": {"countryregioncode": {"name": "countryregioncode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`countryregion`", "created_at": 1687911896.454836}, "source.desafioaeadw.dbt_cintia.creditcard": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "creditcard", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.creditcard", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "creditcard"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "creditcard", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es de cart\u00f5es de cr\u00e9dito", "columns": {"creditcardid": {"name": "creditcardid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`creditcard`", "created_at": 1687911896.4609733}, "source.desafioaeadw.dbt_cintia.customer": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "customer", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.customer", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "customer"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "customer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es dos clientes", "columns": {"customerid": {"name": "customerid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personid": {"name": "personid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`customer`", "created_at": 1687911896.4701316}, "source.desafioaeadw.dbt_cintia.employee": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "employee", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.employee", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "employee"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "employee", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es de colaboradores", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`employee`", "created_at": 1687911896.4759917}, "source.desafioaeadw.dbt_cintia.person": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "person", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.person", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "person"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "person", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es das pessoas envolvidas (colaboradores, clientes e fornecedores)", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`person`", "created_at": 1687911896.4826853}, "source.desafioaeadw.dbt_cintia.product": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "product", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.product", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "product"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabelas de informa\u00e7\u00f5es de produtos vendidos", "columns": {"productid": {"name": "productid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`product`", "created_at": 1687911896.488597}, "source.desafioaeadw.dbt_cintia.productcategory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productcategory", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.productcategory", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "productcategory"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "productcategory", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabelas de informa\u00e7\u00f5es das categorias dos produtos vendidos", "columns": {"productcategoryid": {"name": "productcategoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productcategory`", "created_at": 1687911896.495035}, "source.desafioaeadw.dbt_cintia.productsubcategory": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "productsubcategory", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.productsubcategory", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "productsubcategory"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "productsubcategory", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabelas de informa\u00e7\u00f5es das subcategorias dos produtos vendidos", "columns": {"productsubcategoryid": {"name": "productsubcategoryid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`productsubcategory`", "created_at": 1687911896.501205}, "source.desafioaeadw.dbt_cintia.salesorderdetail": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesorderdetail", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.salesorderdetail", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "salesorderdetail"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "salesorderdetail", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es detalhadas dos pedidos, por produto", "columns": {"salesorderdetailid": {"name": "salesorderdetailid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesorderid": {"name": "salesorderid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesorderdetail`", "created_at": 1687911896.5105298}, "source.desafioaeadw.dbt_cintia.salesorderheader": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesorderheader", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.salesorderheader", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "salesorderheader"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "salesorderheader", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es gerais do pedido", "columns": {"salesorderid": {"name": "salesorderid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customerid": {"name": "customerid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesorderheader`", "created_at": 1687911896.5204906}, "source.desafioaeadw.dbt_cintia.salesorderheadersalesreason": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesorderheadersalesreason", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.salesorderheadersalesreason", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "salesorderheadersalesreason"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "salesorderheadersalesreason", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es do motivo da venda", "columns": {"salesorderid": {"name": "salesorderid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesorderheadersalesreason`", "created_at": 1687911896.5236864}, "source.desafioaeadw.dbt_cintia.salesperson": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesperson", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.salesperson", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "salesperson"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "salesperson", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es do colaborador", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesperson`", "created_at": 1687911896.530105}, "source.desafioaeadw.dbt_cintia.salesreason": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "salesreason", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.salesreason", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "salesreason"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "salesreason", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es dos motivos da compra", "columns": {"salesreasonid": {"name": "salesreasonid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`salesreason`", "created_at": 1687911896.5362973}, "source.desafioaeadw.dbt_cintia.stateprovince": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "stateprovince", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.stateprovince", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "stateprovince"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "stateprovince", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es de estados e prov\u00edncias", "columns": {"stateprovinceid": {"name": "stateprovinceid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`stateprovince`", "created_at": 1687911896.5447567}, "source.desafioaeadw.dbt_cintia.store": {"database": "desafioaeadw", "schema": "dbt_cintia", "name": "store", "resource_type": "source", "package_name": "desafioaeadw", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "unique_id": "source.desafioaeadw.dbt_cintia.store", "fqn": ["desafioaeadw", "staging", "dbt_cintia", "store"], "source_name": "dbt_cintia", "source_description": "", "loader": "", "identifier": "store", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabela de informa\u00e7\u00f5es de lojas", "columns": {"businessentityid": {"name": "businessentityid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`desafioaeadw`.`dbt_cintia`.`store`", "created_at": 1687911896.55141}}, "macros": {"macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.449244, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4504306, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4516165, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.452391, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4558477, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4566016, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4573996, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4577332, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4582562, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4586885, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.459129, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4595253, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4600282, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4607549, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4612005, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4616075, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4626298, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4635751, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.465119, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4655156, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4661763, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4756882, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4764187, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4769273, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.477721, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4790747, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4796605, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4802892, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4831274, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4878879, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by.field), source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4892986, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(is_time_ingestion_partitioning, temporary, relation, compiled_code, language='sql') %}\n  {% if is_time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% endif %}\n  {% if is_time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_ingestion_time_partitioned_table_as_sql(temporary, relation, compiled_code)) %}\n    {{ return(bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.4914944, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.493197, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(dest_columns) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5041518, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5066931, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5071719, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5095053, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.510518, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5109417, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5112793, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5182557, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5189507, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.5219183, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.52423, "supported_languages": ["sql"]}, "macro.dbt_bigquery.build_partition_time_exp": {"name": "build_partition_time_exp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.build_partition_time_exp", "macro_sql": "{% macro build_partition_time_exp(partition_by) %}\n  {% if partition_by.data_type == 'timestamp' %}\n    {% set partition_value = partition_by.field %}\n  {% else %}\n    {% set partition_value = 'timestamp(' + partition_by.field + ')' %}\n  {% endif %}\n  {{ return({'value': partition_value, 'field': partition_by.field}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.525624, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.526435, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.530834, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6021333, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6049273, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {%- if partition_by.time_ingestion_partitioning -%}\n          {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n          {%- else -%}\n          {{sql}}\n          {%- endif -%}\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6082563, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ declare_dbt_max_partition(this, partition_by, sql, 'sql') +\n     bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6101182, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render_wrapped() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6124978, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.614354, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_time_exp, sql, is_nested) %}\n\n  select {{ partition_time_exp['value'] }} as _partitiontime, * EXCEPT({{ partition_time_exp['field'] }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6174562, "supported_languages": null}, "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql": {"name": "create_ingestion_time_partitioned_table_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro_sql": "{% macro create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n  {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {% set ingestion_time_partition_config_raw = fromjson(tojson(raw_partition_by)) %}\n  {% do ingestion_time_partition_config_raw.update({'field':'_PARTITIONTIME'}) %}\n\n  {%- set ingestion_time_partition_config = adapter.parse_partition_by(ingestion_time_partition_config_raw) -%}\n\n  create or replace table {{ relation }} ({{table_dest_columns_csv}})\n  {{ partition_by(ingestion_time_partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6197166, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6247015, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6254156, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} (_partitiontime, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6275327, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6282163, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6294954, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6301103, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.630654, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6314406, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6317842, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6323857, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6335177, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6339428, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6344721, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6347432, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6351311, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6354501, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6378026, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6387985, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6405768, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6410577, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6425061, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6429293, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6433952, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.643594, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6463928, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6466875, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6470847, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6473916, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6481984, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6486456, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6489034, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6495068, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6500077, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6506088, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6510556, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6516626, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6539595, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6551144, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6558259, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6563997, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6589296, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6619177, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6623416, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6630588, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6635175, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6643503, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6648743, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6662464, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.666828, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6687565, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6697166, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6719134, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6734571, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6739743, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6744187, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6753736, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6779063, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.678552, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6789858, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6794384, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6798592, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.680771, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6812947, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6820424, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6825118, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.682899, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6843424, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.684878, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6853998, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6858015, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6864374, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6880713, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.694213, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6946292, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6951308, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6958084, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6963933, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.697115, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.697572, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6980803, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6985648, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.6989653, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.699524, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7004158, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.701324, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7026772, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7032547, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7050323, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.706057, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7076414, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7082458, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7086582, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7090955, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7102077, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7105973, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7109368, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7112541, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7116492, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7118728, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7123218, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7127192, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7159233, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7190642, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7223644, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.724174, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7274663, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7287426, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7295692, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7308712, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.731549, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7322824, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7328198, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7335896, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7341218, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7350717, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7356615, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7366812, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7384138, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.739306, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7402072, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7410305, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7418482, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7442079, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.744912, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7452676, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7456133, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7460222, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7488778, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7503514, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7520597, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7525995, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.757115, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7683544, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.769969, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7811937, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.78513, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7859085, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.791355, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7921383, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.7936566, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.803137, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8080022, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8111467, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8132663, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.814995, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8155518, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.816036, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8167493, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.817223, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8180249, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.818482, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8191485, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8196251, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.820065, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8241522, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.825995, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.826454, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.827515, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8285341, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8341236, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8387444, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8401992, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8409836, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8414545, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8421814, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8429298, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8434663, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8486588, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8602736, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.862501, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8630867, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8643715, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8655324, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.866003, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8663669, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8666677, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8671186, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8674183, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8686745, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8693368, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8754034, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.882969, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.893636, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8945932, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8950317, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.895312, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.895697, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8959925, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.896638, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8990269, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.8996236, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.900383, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.901431, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9301348, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9328437, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9343874, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.951312, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9524815, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9539068, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9581718, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9593165, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9605157, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9655597, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9697478, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9721909, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9733498, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9784236, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9793353, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.980407, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9828148, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9834478, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9861548, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9917364, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.995474, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9974427, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.997754, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.999118, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786475.9995487, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0016448, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0027916, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0082443, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.008945, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0103214, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0110548, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0117726, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0121324, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0128815, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0135598, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0142462, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0146165, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0170407, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.017612, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.018105, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0185542, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0191119, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0195577, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0200286, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0206492, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0213697, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0226736, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0232968, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0237443, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0271578, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.027762, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0287495, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0292392, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0302067, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0307524, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0315478, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.031992, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0329971, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.033851, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0345604, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0348368, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0355735, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0360494, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0367277, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0369792, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.039006, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0415018, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.042231, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0430262, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0433624, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0449336, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.046126, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0468602, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0471885, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.04806, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0486984, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0498974, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0504272, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0512626, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.051798, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0526292, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.053048, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0551267, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0568862, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0580547, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0595324, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.060509, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0614238, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0623288, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0658865, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0687668, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.078261, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '\u2705: perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '\u2705: both are null'\n            when a_query.{{ primary_key }} is null then '\ud83e\udd37: \u200dmissing from a'\n            when b_query.{{ primary_key }} is null then '\ud83e\udd37: missing from b'\n            when a_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in a only'\n            when b_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '\ud83d\ude45: \u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0810225, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0853088, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0907693, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0931726, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0945413, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.0978265, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.100259, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.100898, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.bigquery__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1014693, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1027265, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1033633, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1079402, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1099844, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1106038, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1122143, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.113906, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1155288, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1178348, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1194525, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.124058, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1262043, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1287563, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.130709, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1337438, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1348572, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1358724, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1398487, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1430404, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1494021, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.154774, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.158227, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1596253, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1611962, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.162557, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1637733, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1647117, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1662269, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1685386, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1706007, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.174713, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1764014, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.177404, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1794617, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1820576, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1835604, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1854186, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.186204, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1867096, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1891005, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1901915, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1917675, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1927028, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1945143, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1966639, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.1978736, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.199508, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2011905, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2018898, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2029376, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2069473, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2082653, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.209, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2096574, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.210153, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.210673, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2124991, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2136738, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.214289, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2157352, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.216843, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.218574, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2231407, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.227701, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.228953, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2310574, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2321417, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2349164, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.236604, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2419462, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2437887, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2464726, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2479498, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2504904, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2586744, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2612603, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.265873, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2694185, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2726674, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.274831, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2783499, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2794905, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2864196, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.287397, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2921004, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2932932, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2957437, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2969139, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.2986934, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3096924, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3114967, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3126442, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3136759, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3148553, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3175662, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3241432, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.327606, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3293495, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3304133, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3312552, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3336437, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3365924, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3462276, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3585117, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.361534, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.362384, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3696322, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3850155, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.3903155, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4095945, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4116213, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4131043, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.413715, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4154582, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4169476, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4178374, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4188335, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.4201255, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1687786476.428083, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.desafioaeadw.department": [], "seed.desafioaeadw.employee": [], "seed.desafioaeadw.employeedepartmenthistory": [], "seed.desafioaeadw.employeepayhistory": [], "seed.desafioaeadw.jobcandidate": [], "seed.desafioaeadw.shift": [], "seed.desafioaeadw.address": [], "seed.desafioaeadw.addresstype": [], "seed.desafioaeadw.businessentity": [], "seed.desafioaeadw.businessentityaddress": [], "seed.desafioaeadw.businessentitycontact": [], "seed.desafioaeadw.contacttype": [], "seed.desafioaeadw.countryregion": [], "seed.desafioaeadw.emailaddress": [], "seed.desafioaeadw.person": [], "seed.desafioaeadw.personphone": [], "seed.desafioaeadw.phonenumbertype": [], "seed.desafioaeadw.stateprovince": [], "seed.desafioaeadw.billofmaterials": [], "seed.desafioaeadw.culture": [], "seed.desafioaeadw.illustration": [], "seed.desafioaeadw.location": [], "seed.desafioaeadw.product": [], "seed.desafioaeadw.productcategory": [], "seed.desafioaeadw.productcosthistory": [], "seed.desafioaeadw.productdescription": [], "seed.desafioaeadw.productdocument": [], "seed.desafioaeadw.productinventory": [], "seed.desafioaeadw.productlistpricehistory": [], "seed.desafioaeadw.productmodel": [], "seed.desafioaeadw.productmodelillustration": [], "seed.desafioaeadw.productmodelproductdescriptionculture": [], "seed.desafioaeadw.productproductphoto": [], "seed.desafioaeadw.productsubcategory": [], "seed.desafioaeadw.scrapreason": [], "seed.desafioaeadw.transactionhistory": [], "seed.desafioaeadw.transactionhistoryarchive": [], "seed.desafioaeadw.unitmeasure": [], "seed.desafioaeadw.workorder": [], "seed.desafioaeadw.workorderrouting": [], "seed.desafioaeadw.productvendor": [], "seed.desafioaeadw.purchaseorderdetail": [], "seed.desafioaeadw.purchaseorderheader": [], "seed.desafioaeadw.shipmethod": [], "seed.desafioaeadw.vendor": [], "seed.desafioaeadw.countryregioncurrency": [], "seed.desafioaeadw.creditcard": [], "seed.desafioaeadw.currency": [], "seed.desafioaeadw.currencyrate": [], "seed.desafioaeadw.customer": [], "seed.desafioaeadw.personcreditcard": [], "seed.desafioaeadw.salesorderdetail": [], "seed.desafioaeadw.salesorderheader": [], "seed.desafioaeadw.salesorderheadersalesreason": [], "seed.desafioaeadw.salesperson": [], "seed.desafioaeadw.salespersonquotahistory": [], "seed.desafioaeadw.salesreason": [], "seed.desafioaeadw.salestaxrate": [], "seed.desafioaeadw.salesterritory": [], "seed.desafioaeadw.salesterritoryhistory": [], "seed.desafioaeadw.shoppingcartitem": [], "seed.desafioaeadw.specialoffer": [], "seed.desafioaeadw.specialofferproduct": [], "seed.desafioaeadw.store": [], "model.desafioaeadw.int_location": ["model.desafioaeadw.stg_address", "model.desafioaeadw.stg_countryregion", "model.desafioaeadw.stg_stateprovince"], "model.desafioaeadw.stg_address": ["source.desafioaeadw.dbt_cintia.address"], "model.desafioaeadw.stg_countryregion": ["source.desafioaeadw.dbt_cintia.countryregion"], "model.desafioaeadw.stg_creditcard": ["source.desafioaeadw.dbt_cintia.creditcard"], "model.desafioaeadw.int_customer": ["model.desafioaeadw.stg_customer", "model.desafioaeadw.stg_person", "model.desafioaeadw.stg_store"], "model.desafioaeadw.stg_customer": ["source.desafioaeadw.dbt_cintia.customer"], "model.desafioaeadw.int_employee": ["model.desafioaeadw.stg_employee", "model.desafioaeadw.stg_person", "model.desafioaeadw.stg_salesperson"], "model.desafioaeadw.stg_employee": ["source.desafioaeadw.dbt_cintia.employee"], "model.desafioaeadw.stg_person": ["source.desafioaeadw.dbt_cintia.person"], "model.desafioaeadw.int_product": ["model.desafioaeadw.stg_product", "model.desafioaeadw.stg_productcategory", "model.desafioaeadw.stg_productsubcategory"], "model.desafioaeadw.stg_product": ["source.desafioaeadw.dbt_cintia.product"], "model.desafioaeadw.stg_productcategory": ["source.desafioaeadw.dbt_cintia.productcategory"], "model.desafioaeadw.stg_productsubcategory": ["source.desafioaeadw.dbt_cintia.productsubcategory"], "model.desafioaeadw.stg_salesorderdetail": ["source.desafioaeadw.dbt_cintia.salesorderdetail"], "model.desafioaeadw.int_salesreason": ["model.desafioaeadw.stg_salesorderheadersalesreason", "model.desafioaeadw.stg_salesreason"], "model.desafioaeadw.stg_salesorderheadersalesreason": ["source.desafioaeadw.dbt_cintia.salesorderheadersalesreason"], "model.desafioaeadw.stg_salesperson": ["source.desafioaeadw.dbt_cintia.salesperson"], "model.desafioaeadw.stg_salesreason": ["source.desafioaeadw.dbt_cintia.salesreason"], "model.desafioaeadw.stg_stateprovince": ["source.desafioaeadw.dbt_cintia.stateprovince"], "model.desafioaeadw.stg_store": ["source.desafioaeadw.dbt_cintia.store"], "test.desafioaeadw.source_unique_dbt_cintia_address_addressid.702f8eae55": ["source.desafioaeadw.dbt_cintia.address"], "test.desafioaeadw.source_not_null_dbt_cintia_address_addressid.390d71e542": ["source.desafioaeadw.dbt_cintia.address"], "test.desafioaeadw.source_unique_dbt_cintia_countryregion_countryregioncode.12dd7e57b9": ["source.desafioaeadw.dbt_cintia.countryregion"], "test.desafioaeadw.source_not_null_dbt_cintia_countryregion_countryregioncode.3d94aeab6e": ["source.desafioaeadw.dbt_cintia.countryregion"], "test.desafioaeadw.source_unique_dbt_cintia_creditcard_creditcardid.bdfd82db3b": ["source.desafioaeadw.dbt_cintia.creditcard"], "test.desafioaeadw.source_not_null_dbt_cintia_creditcard_creditcardid.f016c94e52": ["source.desafioaeadw.dbt_cintia.creditcard"], "test.desafioaeadw.source_unique_dbt_cintia_customer_customerid.f24eac5df0": ["source.desafioaeadw.dbt_cintia.customer"], "test.desafioaeadw.source_not_null_dbt_cintia_customer_customerid.a9460e7b9a": ["source.desafioaeadw.dbt_cintia.customer"], "test.desafioaeadw.source_unique_dbt_cintia_customer_personid.238a3e6a87": ["source.desafioaeadw.dbt_cintia.customer"], "test.desafioaeadw.source_unique_dbt_cintia_employee_businessentityid.0340a127ea": ["source.desafioaeadw.dbt_cintia.employee"], "test.desafioaeadw.source_not_null_dbt_cintia_employee_businessentityid.d6bc521ace": ["source.desafioaeadw.dbt_cintia.employee"], "test.desafioaeadw.source_unique_dbt_cintia_person_businessentityid.4f8ba12edb": ["source.desafioaeadw.dbt_cintia.person"], "test.desafioaeadw.source_not_null_dbt_cintia_person_businessentityid.cfc39e7537": ["source.desafioaeadw.dbt_cintia.person"], "test.desafioaeadw.source_unique_dbt_cintia_product_productid.d3a2ceaccc": ["source.desafioaeadw.dbt_cintia.product"], "test.desafioaeadw.source_not_null_dbt_cintia_product_productid.c5cfbebb09": ["source.desafioaeadw.dbt_cintia.product"], "test.desafioaeadw.source_unique_dbt_cintia_productcategory_productcategoryid.6ce999c879": ["source.desafioaeadw.dbt_cintia.productcategory"], "test.desafioaeadw.source_not_null_dbt_cintia_productcategory_productcategoryid.9417f41460": ["source.desafioaeadw.dbt_cintia.productcategory"], "test.desafioaeadw.source_unique_dbt_cintia_productsubcategory_productsubcategoryid.db4c3d9cef": ["source.desafioaeadw.dbt_cintia.productsubcategory"], "test.desafioaeadw.source_not_null_dbt_cintia_productsubcategory_productsubcategoryid.1ed6ae4159": ["source.desafioaeadw.dbt_cintia.productsubcategory"], "test.desafioaeadw.source_unique_dbt_cintia_salesorderdetail_salesorderdetailid.03df8d3a4e": ["source.desafioaeadw.dbt_cintia.salesorderdetail"], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid.9ce055e52e": ["source.desafioaeadw.dbt_cintia.salesorderdetail"], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderid.8225b6852e": ["source.desafioaeadw.dbt_cintia.salesorderdetail"], "test.desafioaeadw.source_unique_dbt_cintia_salesorderheader_salesorderid.e9d22a9dcb": ["source.desafioaeadw.dbt_cintia.salesorderheader"], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_salesorderid.da27b2fc22": ["source.desafioaeadw.dbt_cintia.salesorderheader"], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_customerid.f3869783df": ["source.desafioaeadw.dbt_cintia.salesorderheader"], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheadersalesreason_salesorderid.a505bde384": ["source.desafioaeadw.dbt_cintia.salesorderheadersalesreason"], "test.desafioaeadw.source_unique_dbt_cintia_salesperson_businessentityid.d447e41aa4": ["source.desafioaeadw.dbt_cintia.salesperson"], "test.desafioaeadw.source_not_null_dbt_cintia_salesperson_businessentityid.b433d7ef88": ["source.desafioaeadw.dbt_cintia.salesperson"], "test.desafioaeadw.source_unique_dbt_cintia_salesreason_salesreasonid.6b2b3f6489": ["source.desafioaeadw.dbt_cintia.salesreason"], "test.desafioaeadw.source_not_null_dbt_cintia_salesreason_salesreasonid.c425b95d75": ["source.desafioaeadw.dbt_cintia.salesreason"], "test.desafioaeadw.source_unique_dbt_cintia_stateprovince_stateprovinceid.adbac1647e": ["source.desafioaeadw.dbt_cintia.stateprovince"], "test.desafioaeadw.source_not_null_dbt_cintia_stateprovince_stateprovinceid.522454b4a0": ["source.desafioaeadw.dbt_cintia.stateprovince"], "test.desafioaeadw.source_unique_dbt_cintia_store_businessentityid.cea51aa654": ["source.desafioaeadw.dbt_cintia.store"], "test.desafioaeadw.source_not_null_dbt_cintia_store_businessentityid.f97b8a6adb": ["source.desafioaeadw.dbt_cintia.store"], "model.desafioaeadw.int_salesorderdetail": ["model.desafioaeadw.stg_salesorderdetail"], "model.desafioaeadw.stg_salesorderheader": ["source.desafioaeadw.dbt_cintia.salesorderheader"], "test.desafioaeadw.teste_faturamento_2011": ["model.desafioaeadw.fct_salesorderheader", "model.desafioaeadw.int_salesorderdetail"], "model.desafioaeadw.dim_product": ["model.desafioaeadw.int_product", "model.desafioaeadw.int_salesorderdetail"], "model.desafioaeadw.dim_creditcard": ["model.desafioaeadw.stg_creditcard", "model.desafioaeadw.stg_salesorderheader"], "model.desafioaeadw.dim_salesorderheaderdetail": ["model.desafioaeadw.int_salesorderdetail"], "model.desafioaeadw.dim_customer": ["model.desafioaeadw.int_customer", "model.desafioaeadw.stg_salesorderheader"], "test.desafioaeadw.unique_dim_product_product_sk.2248c4335c": ["model.desafioaeadw.dim_product"], "test.desafioaeadw.not_null_dim_product_product_sk.271feb5417": ["model.desafioaeadw.dim_product"], "test.desafioaeadw.unique_dim_product_productid.cfdf676d85": ["model.desafioaeadw.dim_product"], "test.desafioaeadw.not_null_dim_product_productid.51449dfe6f": ["model.desafioaeadw.dim_product"], "test.desafioaeadw.not_null_dim_product_productname.3ba6e7fa20": ["model.desafioaeadw.dim_product"], "test.desafioaeadw.unique_dim_creditcard_creditcard_sk.a512508095": ["model.desafioaeadw.dim_creditcard"], "test.desafioaeadw.not_null_dim_creditcard_creditcard_sk.36d710f4d9": ["model.desafioaeadw.dim_creditcard"], "test.desafioaeadw.unique_dim_creditcard_creditcardid.1f92f78ad3": ["model.desafioaeadw.dim_creditcard"], "test.desafioaeadw.not_null_dim_creditcard_creditcardid.266ea33d81": ["model.desafioaeadw.dim_creditcard"], "test.desafioaeadw.not_null_dim_creditcard_cardnumber.6de758e948": ["model.desafioaeadw.dim_creditcard"], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorder_sk.bc4ee0c9b0": ["model.desafioaeadw.dim_salesorderheaderdetail"], "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetail_sk.12ac5ee767": ["model.desafioaeadw.dim_salesorderheaderdetail"], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetail_sk.4504b643b6": ["model.desafioaeadw.dim_salesorderheaderdetail"], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderid.44401d0c72": ["model.desafioaeadw.dim_salesorderheaderdetail"], "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetailid.c309577c63": ["model.desafioaeadw.dim_salesorderheaderdetail"], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetailid.68349e6e2d": ["model.desafioaeadw.dim_salesorderheaderdetail"], "test.desafioaeadw.unique_dim_customer_customer_sk.c225f6f263": ["model.desafioaeadw.dim_customer"], "test.desafioaeadw.not_null_dim_customer_customer_sk.69b9dd095b": ["model.desafioaeadw.dim_customer"], "test.desafioaeadw.unique_dim_customer_customerid.04913d3698": ["model.desafioaeadw.dim_customer"], "test.desafioaeadw.not_null_dim_customer_customerid.4d829c4322": ["model.desafioaeadw.dim_customer"], "test.desafioaeadw.not_null_dim_customer_customerfullname.7cf124b52b": ["model.desafioaeadw.dim_customer"], "model.desafioaeadw.dim_location": ["model.desafioaeadw.int_location", "model.desafioaeadw.stg_salesorderheader"], "test.desafioaeadw.unique_dim_location_shiptoaddress_sk.c3668ed444": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.not_null_dim_location_shiptoaddress_sk.1e02703fae": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.unique_dim_location_shiptoaddressid.79c9ecfbfb": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.not_null_dim_location_shiptoaddressid.1c50ad8e6e": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.not_null_dim_location_addressline1.307d00b012": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.not_null_dim_location_city.9914acb951": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.not_null_dim_location_postalcode.cfef3ef752": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.not_null_dim_location_statename.1e037cf69d": ["model.desafioaeadw.dim_location"], "test.desafioaeadw.not_null_dim_location_countryname.b81275aa54": ["model.desafioaeadw.dim_location"], "model.desafioaeadw.dim_salesreason": ["model.desafioaeadw.int_salesreason", "model.desafioaeadw.stg_salesorderheader"], "test.desafioaeadw.unique_dim_salesreason_reason_sk.4ff00b898d": ["model.desafioaeadw.dim_salesreason"], "test.desafioaeadw.unique_dim_salesreason_salesorderid.9e51ba16b7": ["model.desafioaeadw.dim_salesreason"], "model.desafioaeadw.fct_salesorderheader": ["model.desafioaeadw.dim_creditcard", "model.desafioaeadw.dim_customer", "model.desafioaeadw.dim_location", "model.desafioaeadw.dim_salesorderheaderdetail", "model.desafioaeadw.stg_salesorderheader"], "test.desafioaeadw.unique_fct_salesorderheader_salesorderheader_sk.eba1ec9273": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_salesorderheader_sk.c96614979d": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.unique_fct_salesorderheader_customer_fk.e29bb9f882": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_customer_fk.6d443d86cb": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.unique_fct_salesorderheader_shiptoaddress_fk.6f2af8c019": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddress_fk.14c88201c6": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.unique_fct_salesorderheader_creditcard_fk.9679ec4441": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_creditcard_fk.5c187fcac6": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.unique_fct_salesorderheader_salesorder_fk.be3f977e9d": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_salesorder_fk.e9e4819509": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.unique_fct_salesorderheader_salesorderid.0dd57120ec": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_salesorderid.2509037bb9": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_orderdate.f518b63fc1": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_shipdate.2f4cfe4de9": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_orderstatus.a63390182a": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_customerid.e2f510e56d": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_billtoaddressid.d097145e60": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddressid.8b4ab7a541": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_shipmethodid.3fbedc176c": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_subtotal.3a7bdcfa1c": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_taxamt.8263c5d068": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_freight.152d6a800b": ["model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.not_null_fct_salesorderheader_totaldue.b297633b24": ["model.desafioaeadw.fct_salesorderheader"], "model.desafioaeadw.fct_salesorderdetail": ["model.desafioaeadw.dim_product", "model.desafioaeadw.dim_salesorderheaderdetail", "model.desafioaeadw.int_salesorderdetail"], "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetail_sk.9e8ff90475": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetail_sk.c134b32084": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.unique_fct_salesorderdetail_product_fk.efae990ba4": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_product_fk.af7ffc2145": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid_fk.7f8648ae81": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid_fk.8ad79ba89f": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid.53d2cc6f6e": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid.de3d90fbfc": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_orderqty.12dec7c8bf": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_productid.efda273e68": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_unitprice.057c29563b": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_unitpricediscount.518a88604e": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_grossrevenue.7abc7eef52": ["model.desafioaeadw.fct_salesorderdetail"], "test.desafioaeadw.not_null_fct_salesorderdetail_discount.b1dbe799a8": ["model.desafioaeadw.fct_salesorderdetail"], "source.desafioaeadw.dbt_cintia.address": [], "source.desafioaeadw.dbt_cintia.countryregion": [], "source.desafioaeadw.dbt_cintia.creditcard": [], "source.desafioaeadw.dbt_cintia.customer": [], "source.desafioaeadw.dbt_cintia.employee": [], "source.desafioaeadw.dbt_cintia.person": [], "source.desafioaeadw.dbt_cintia.product": [], "source.desafioaeadw.dbt_cintia.productcategory": [], "source.desafioaeadw.dbt_cintia.productsubcategory": [], "source.desafioaeadw.dbt_cintia.salesorderdetail": [], "source.desafioaeadw.dbt_cintia.salesorderheader": [], "source.desafioaeadw.dbt_cintia.salesorderheadersalesreason": [], "source.desafioaeadw.dbt_cintia.salesperson": [], "source.desafioaeadw.dbt_cintia.salesreason": [], "source.desafioaeadw.dbt_cintia.stateprovince": [], "source.desafioaeadw.dbt_cintia.store": []}, "child_map": {"seed.desafioaeadw.department": [], "seed.desafioaeadw.employee": [], "seed.desafioaeadw.employeedepartmenthistory": [], "seed.desafioaeadw.employeepayhistory": [], "seed.desafioaeadw.jobcandidate": [], "seed.desafioaeadw.shift": [], "seed.desafioaeadw.address": [], "seed.desafioaeadw.addresstype": [], "seed.desafioaeadw.businessentity": [], "seed.desafioaeadw.businessentityaddress": [], "seed.desafioaeadw.businessentitycontact": [], "seed.desafioaeadw.contacttype": [], "seed.desafioaeadw.countryregion": [], "seed.desafioaeadw.emailaddress": [], "seed.desafioaeadw.person": [], "seed.desafioaeadw.personphone": [], "seed.desafioaeadw.phonenumbertype": [], "seed.desafioaeadw.stateprovince": [], "seed.desafioaeadw.billofmaterials": [], "seed.desafioaeadw.culture": [], "seed.desafioaeadw.illustration": [], "seed.desafioaeadw.location": [], "seed.desafioaeadw.product": [], "seed.desafioaeadw.productcategory": [], "seed.desafioaeadw.productcosthistory": [], "seed.desafioaeadw.productdescription": [], "seed.desafioaeadw.productdocument": [], "seed.desafioaeadw.productinventory": [], "seed.desafioaeadw.productlistpricehistory": [], "seed.desafioaeadw.productmodel": [], "seed.desafioaeadw.productmodelillustration": [], "seed.desafioaeadw.productmodelproductdescriptionculture": [], "seed.desafioaeadw.productproductphoto": [], "seed.desafioaeadw.productsubcategory": [], "seed.desafioaeadw.scrapreason": [], "seed.desafioaeadw.transactionhistory": [], "seed.desafioaeadw.transactionhistoryarchive": [], "seed.desafioaeadw.unitmeasure": [], "seed.desafioaeadw.workorder": [], "seed.desafioaeadw.workorderrouting": [], "seed.desafioaeadw.productvendor": [], "seed.desafioaeadw.purchaseorderdetail": [], "seed.desafioaeadw.purchaseorderheader": [], "seed.desafioaeadw.shipmethod": [], "seed.desafioaeadw.vendor": [], "seed.desafioaeadw.countryregioncurrency": [], "seed.desafioaeadw.creditcard": [], "seed.desafioaeadw.currency": [], "seed.desafioaeadw.currencyrate": [], "seed.desafioaeadw.customer": [], "seed.desafioaeadw.personcreditcard": [], "seed.desafioaeadw.salesorderdetail": [], "seed.desafioaeadw.salesorderheader": [], "seed.desafioaeadw.salesorderheadersalesreason": [], "seed.desafioaeadw.salesperson": [], "seed.desafioaeadw.salespersonquotahistory": [], "seed.desafioaeadw.salesreason": [], "seed.desafioaeadw.salestaxrate": [], "seed.desafioaeadw.salesterritory": [], "seed.desafioaeadw.salesterritoryhistory": [], "seed.desafioaeadw.shoppingcartitem": [], "seed.desafioaeadw.specialoffer": [], "seed.desafioaeadw.specialofferproduct": [], "seed.desafioaeadw.store": [], "model.desafioaeadw.int_location": ["model.desafioaeadw.dim_location"], "model.desafioaeadw.stg_address": ["model.desafioaeadw.int_location"], "model.desafioaeadw.stg_countryregion": ["model.desafioaeadw.int_location"], "model.desafioaeadw.stg_creditcard": ["model.desafioaeadw.dim_creditcard"], "model.desafioaeadw.int_customer": ["model.desafioaeadw.dim_customer"], "model.desafioaeadw.stg_customer": ["model.desafioaeadw.int_customer"], "model.desafioaeadw.int_employee": [], "model.desafioaeadw.stg_employee": ["model.desafioaeadw.int_employee"], "model.desafioaeadw.stg_person": ["model.desafioaeadw.int_customer", "model.desafioaeadw.int_employee"], "model.desafioaeadw.int_product": ["model.desafioaeadw.dim_product"], "model.desafioaeadw.stg_product": ["model.desafioaeadw.int_product"], "model.desafioaeadw.stg_productcategory": ["model.desafioaeadw.int_product"], "model.desafioaeadw.stg_productsubcategory": ["model.desafioaeadw.int_product"], "model.desafioaeadw.stg_salesorderdetail": ["model.desafioaeadw.int_salesorderdetail"], "model.desafioaeadw.int_salesreason": ["model.desafioaeadw.dim_salesreason"], "model.desafioaeadw.stg_salesorderheadersalesreason": ["model.desafioaeadw.int_salesreason"], "model.desafioaeadw.stg_salesperson": ["model.desafioaeadw.int_employee"], "model.desafioaeadw.stg_salesreason": ["model.desafioaeadw.int_salesreason"], "model.desafioaeadw.stg_stateprovince": ["model.desafioaeadw.int_location"], "model.desafioaeadw.stg_store": ["model.desafioaeadw.int_customer"], "test.desafioaeadw.source_unique_dbt_cintia_address_addressid.702f8eae55": [], "test.desafioaeadw.source_not_null_dbt_cintia_address_addressid.390d71e542": [], "test.desafioaeadw.source_unique_dbt_cintia_countryregion_countryregioncode.12dd7e57b9": [], "test.desafioaeadw.source_not_null_dbt_cintia_countryregion_countryregioncode.3d94aeab6e": [], "test.desafioaeadw.source_unique_dbt_cintia_creditcard_creditcardid.bdfd82db3b": [], "test.desafioaeadw.source_not_null_dbt_cintia_creditcard_creditcardid.f016c94e52": [], "test.desafioaeadw.source_unique_dbt_cintia_customer_customerid.f24eac5df0": [], "test.desafioaeadw.source_not_null_dbt_cintia_customer_customerid.a9460e7b9a": [], "test.desafioaeadw.source_unique_dbt_cintia_customer_personid.238a3e6a87": [], "test.desafioaeadw.source_unique_dbt_cintia_employee_businessentityid.0340a127ea": [], "test.desafioaeadw.source_not_null_dbt_cintia_employee_businessentityid.d6bc521ace": [], "test.desafioaeadw.source_unique_dbt_cintia_person_businessentityid.4f8ba12edb": [], "test.desafioaeadw.source_not_null_dbt_cintia_person_businessentityid.cfc39e7537": [], "test.desafioaeadw.source_unique_dbt_cintia_product_productid.d3a2ceaccc": [], "test.desafioaeadw.source_not_null_dbt_cintia_product_productid.c5cfbebb09": [], "test.desafioaeadw.source_unique_dbt_cintia_productcategory_productcategoryid.6ce999c879": [], "test.desafioaeadw.source_not_null_dbt_cintia_productcategory_productcategoryid.9417f41460": [], "test.desafioaeadw.source_unique_dbt_cintia_productsubcategory_productsubcategoryid.db4c3d9cef": [], "test.desafioaeadw.source_not_null_dbt_cintia_productsubcategory_productsubcategoryid.1ed6ae4159": [], "test.desafioaeadw.source_unique_dbt_cintia_salesorderdetail_salesorderdetailid.03df8d3a4e": [], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid.9ce055e52e": [], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderid.8225b6852e": [], "test.desafioaeadw.source_unique_dbt_cintia_salesorderheader_salesorderid.e9d22a9dcb": [], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_salesorderid.da27b2fc22": [], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_customerid.f3869783df": [], "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheadersalesreason_salesorderid.a505bde384": [], "test.desafioaeadw.source_unique_dbt_cintia_salesperson_businessentityid.d447e41aa4": [], "test.desafioaeadw.source_not_null_dbt_cintia_salesperson_businessentityid.b433d7ef88": [], "test.desafioaeadw.source_unique_dbt_cintia_salesreason_salesreasonid.6b2b3f6489": [], "test.desafioaeadw.source_not_null_dbt_cintia_salesreason_salesreasonid.c425b95d75": [], "test.desafioaeadw.source_unique_dbt_cintia_stateprovince_stateprovinceid.adbac1647e": [], "test.desafioaeadw.source_not_null_dbt_cintia_stateprovince_stateprovinceid.522454b4a0": [], "test.desafioaeadw.source_unique_dbt_cintia_store_businessentityid.cea51aa654": [], "test.desafioaeadw.source_not_null_dbt_cintia_store_businessentityid.f97b8a6adb": [], "model.desafioaeadw.int_salesorderdetail": ["model.desafioaeadw.dim_product", "model.desafioaeadw.dim_salesorderheaderdetail", "model.desafioaeadw.fct_salesorderdetail", "test.desafioaeadw.teste_faturamento_2011"], "model.desafioaeadw.stg_salesorderheader": ["model.desafioaeadw.dim_creditcard", "model.desafioaeadw.dim_customer", "model.desafioaeadw.dim_location", "model.desafioaeadw.dim_salesreason", "model.desafioaeadw.fct_salesorderheader"], "test.desafioaeadw.teste_faturamento_2011": [], "model.desafioaeadw.dim_product": ["model.desafioaeadw.fct_salesorderdetail", "test.desafioaeadw.not_null_dim_product_product_sk.271feb5417", "test.desafioaeadw.not_null_dim_product_productid.51449dfe6f", "test.desafioaeadw.not_null_dim_product_productname.3ba6e7fa20", "test.desafioaeadw.unique_dim_product_product_sk.2248c4335c", "test.desafioaeadw.unique_dim_product_productid.cfdf676d85"], "model.desafioaeadw.dim_creditcard": ["model.desafioaeadw.fct_salesorderheader", "test.desafioaeadw.not_null_dim_creditcard_cardnumber.6de758e948", "test.desafioaeadw.not_null_dim_creditcard_creditcard_sk.36d710f4d9", "test.desafioaeadw.not_null_dim_creditcard_creditcardid.266ea33d81", "test.desafioaeadw.unique_dim_creditcard_creditcard_sk.a512508095", "test.desafioaeadw.unique_dim_creditcard_creditcardid.1f92f78ad3"], "model.desafioaeadw.dim_salesorderheaderdetail": ["model.desafioaeadw.fct_salesorderdetail", "model.desafioaeadw.fct_salesorderheader", "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorder_sk.bc4ee0c9b0", "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetail_sk.4504b643b6", "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetailid.68349e6e2d", "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderid.44401d0c72", "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetail_sk.12ac5ee767", "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetailid.c309577c63"], "model.desafioaeadw.dim_customer": ["model.desafioaeadw.fct_salesorderheader", "test.desafioaeadw.not_null_dim_customer_customer_sk.69b9dd095b", "test.desafioaeadw.not_null_dim_customer_customerfullname.7cf124b52b", "test.desafioaeadw.not_null_dim_customer_customerid.4d829c4322", "test.desafioaeadw.unique_dim_customer_customer_sk.c225f6f263", "test.desafioaeadw.unique_dim_customer_customerid.04913d3698"], "test.desafioaeadw.unique_dim_product_product_sk.2248c4335c": [], "test.desafioaeadw.not_null_dim_product_product_sk.271feb5417": [], "test.desafioaeadw.unique_dim_product_productid.cfdf676d85": [], "test.desafioaeadw.not_null_dim_product_productid.51449dfe6f": [], "test.desafioaeadw.not_null_dim_product_productname.3ba6e7fa20": [], "test.desafioaeadw.unique_dim_creditcard_creditcard_sk.a512508095": [], "test.desafioaeadw.not_null_dim_creditcard_creditcard_sk.36d710f4d9": [], "test.desafioaeadw.unique_dim_creditcard_creditcardid.1f92f78ad3": [], "test.desafioaeadw.not_null_dim_creditcard_creditcardid.266ea33d81": [], "test.desafioaeadw.not_null_dim_creditcard_cardnumber.6de758e948": [], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorder_sk.bc4ee0c9b0": [], "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetail_sk.12ac5ee767": [], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetail_sk.4504b643b6": [], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderid.44401d0c72": [], "test.desafioaeadw.unique_dim_salesorderheaderdetail_salesorderdetailid.c309577c63": [], "test.desafioaeadw.not_null_dim_salesorderheaderdetail_salesorderdetailid.68349e6e2d": [], "test.desafioaeadw.unique_dim_customer_customer_sk.c225f6f263": [], "test.desafioaeadw.not_null_dim_customer_customer_sk.69b9dd095b": [], "test.desafioaeadw.unique_dim_customer_customerid.04913d3698": [], "test.desafioaeadw.not_null_dim_customer_customerid.4d829c4322": [], "test.desafioaeadw.not_null_dim_customer_customerfullname.7cf124b52b": [], "model.desafioaeadw.dim_location": ["model.desafioaeadw.fct_salesorderheader", "test.desafioaeadw.not_null_dim_location_addressline1.307d00b012", "test.desafioaeadw.not_null_dim_location_city.9914acb951", "test.desafioaeadw.not_null_dim_location_countryname.b81275aa54", "test.desafioaeadw.not_null_dim_location_postalcode.cfef3ef752", "test.desafioaeadw.not_null_dim_location_shiptoaddress_sk.1e02703fae", "test.desafioaeadw.not_null_dim_location_shiptoaddressid.1c50ad8e6e", "test.desafioaeadw.not_null_dim_location_statename.1e037cf69d", "test.desafioaeadw.unique_dim_location_shiptoaddress_sk.c3668ed444", "test.desafioaeadw.unique_dim_location_shiptoaddressid.79c9ecfbfb"], "test.desafioaeadw.unique_dim_location_shiptoaddress_sk.c3668ed444": [], "test.desafioaeadw.not_null_dim_location_shiptoaddress_sk.1e02703fae": [], "test.desafioaeadw.unique_dim_location_shiptoaddressid.79c9ecfbfb": [], "test.desafioaeadw.not_null_dim_location_shiptoaddressid.1c50ad8e6e": [], "test.desafioaeadw.not_null_dim_location_addressline1.307d00b012": [], "test.desafioaeadw.not_null_dim_location_city.9914acb951": [], "test.desafioaeadw.not_null_dim_location_postalcode.cfef3ef752": [], "test.desafioaeadw.not_null_dim_location_statename.1e037cf69d": [], "test.desafioaeadw.not_null_dim_location_countryname.b81275aa54": [], "model.desafioaeadw.dim_salesreason": ["test.desafioaeadw.unique_dim_salesreason_reason_sk.4ff00b898d", "test.desafioaeadw.unique_dim_salesreason_salesorderid.9e51ba16b7"], "test.desafioaeadw.unique_dim_salesreason_reason_sk.4ff00b898d": [], "test.desafioaeadw.unique_dim_salesreason_salesorderid.9e51ba16b7": [], "model.desafioaeadw.fct_salesorderheader": ["test.desafioaeadw.not_null_fct_salesorderheader_billtoaddressid.d097145e60", "test.desafioaeadw.not_null_fct_salesorderheader_creditcard_fk.5c187fcac6", "test.desafioaeadw.not_null_fct_salesorderheader_customer_fk.6d443d86cb", "test.desafioaeadw.not_null_fct_salesorderheader_customerid.e2f510e56d", "test.desafioaeadw.not_null_fct_salesorderheader_freight.152d6a800b", "test.desafioaeadw.not_null_fct_salesorderheader_orderdate.f518b63fc1", "test.desafioaeadw.not_null_fct_salesorderheader_orderstatus.a63390182a", "test.desafioaeadw.not_null_fct_salesorderheader_salesorder_fk.e9e4819509", "test.desafioaeadw.not_null_fct_salesorderheader_salesorderheader_sk.c96614979d", "test.desafioaeadw.not_null_fct_salesorderheader_salesorderid.2509037bb9", "test.desafioaeadw.not_null_fct_salesorderheader_shipdate.2f4cfe4de9", "test.desafioaeadw.not_null_fct_salesorderheader_shipmethodid.3fbedc176c", "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddress_fk.14c88201c6", "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddressid.8b4ab7a541", "test.desafioaeadw.not_null_fct_salesorderheader_subtotal.3a7bdcfa1c", "test.desafioaeadw.not_null_fct_salesorderheader_taxamt.8263c5d068", "test.desafioaeadw.not_null_fct_salesorderheader_totaldue.b297633b24", "test.desafioaeadw.teste_faturamento_2011", "test.desafioaeadw.unique_fct_salesorderheader_creditcard_fk.9679ec4441", "test.desafioaeadw.unique_fct_salesorderheader_customer_fk.e29bb9f882", "test.desafioaeadw.unique_fct_salesorderheader_salesorder_fk.be3f977e9d", "test.desafioaeadw.unique_fct_salesorderheader_salesorderheader_sk.eba1ec9273", "test.desafioaeadw.unique_fct_salesorderheader_salesorderid.0dd57120ec", "test.desafioaeadw.unique_fct_salesorderheader_shiptoaddress_fk.6f2af8c019"], "test.desafioaeadw.unique_fct_salesorderheader_salesorderheader_sk.eba1ec9273": [], "test.desafioaeadw.not_null_fct_salesorderheader_salesorderheader_sk.c96614979d": [], "test.desafioaeadw.unique_fct_salesorderheader_customer_fk.e29bb9f882": [], "test.desafioaeadw.not_null_fct_salesorderheader_customer_fk.6d443d86cb": [], "test.desafioaeadw.unique_fct_salesorderheader_shiptoaddress_fk.6f2af8c019": [], "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddress_fk.14c88201c6": [], "test.desafioaeadw.unique_fct_salesorderheader_creditcard_fk.9679ec4441": [], "test.desafioaeadw.not_null_fct_salesorderheader_creditcard_fk.5c187fcac6": [], "test.desafioaeadw.unique_fct_salesorderheader_salesorder_fk.be3f977e9d": [], "test.desafioaeadw.not_null_fct_salesorderheader_salesorder_fk.e9e4819509": [], "test.desafioaeadw.unique_fct_salesorderheader_salesorderid.0dd57120ec": [], "test.desafioaeadw.not_null_fct_salesorderheader_salesorderid.2509037bb9": [], "test.desafioaeadw.not_null_fct_salesorderheader_orderdate.f518b63fc1": [], "test.desafioaeadw.not_null_fct_salesorderheader_shipdate.2f4cfe4de9": [], "test.desafioaeadw.not_null_fct_salesorderheader_orderstatus.a63390182a": [], "test.desafioaeadw.not_null_fct_salesorderheader_customerid.e2f510e56d": [], "test.desafioaeadw.not_null_fct_salesorderheader_billtoaddressid.d097145e60": [], "test.desafioaeadw.not_null_fct_salesorderheader_shiptoaddressid.8b4ab7a541": [], "test.desafioaeadw.not_null_fct_salesorderheader_shipmethodid.3fbedc176c": [], "test.desafioaeadw.not_null_fct_salesorderheader_subtotal.3a7bdcfa1c": [], "test.desafioaeadw.not_null_fct_salesorderheader_taxamt.8263c5d068": [], "test.desafioaeadw.not_null_fct_salesorderheader_freight.152d6a800b": [], "test.desafioaeadw.not_null_fct_salesorderheader_totaldue.b297633b24": [], "model.desafioaeadw.fct_salesorderdetail": ["test.desafioaeadw.not_null_fct_salesorderdetail_discount.b1dbe799a8", "test.desafioaeadw.not_null_fct_salesorderdetail_grossrevenue.7abc7eef52", "test.desafioaeadw.not_null_fct_salesorderdetail_orderqty.12dec7c8bf", "test.desafioaeadw.not_null_fct_salesorderdetail_product_fk.af7ffc2145", "test.desafioaeadw.not_null_fct_salesorderdetail_productid.efda273e68", "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetail_sk.c134b32084", "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid.de3d90fbfc", "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid_fk.8ad79ba89f", "test.desafioaeadw.not_null_fct_salesorderdetail_unitprice.057c29563b", "test.desafioaeadw.not_null_fct_salesorderdetail_unitpricediscount.518a88604e", "test.desafioaeadw.unique_fct_salesorderdetail_product_fk.efae990ba4", "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetail_sk.9e8ff90475", "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid.53d2cc6f6e", "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid_fk.7f8648ae81"], "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetail_sk.9e8ff90475": [], "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetail_sk.c134b32084": [], "test.desafioaeadw.unique_fct_salesorderdetail_product_fk.efae990ba4": [], "test.desafioaeadw.not_null_fct_salesorderdetail_product_fk.af7ffc2145": [], "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid_fk.7f8648ae81": [], "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid_fk.8ad79ba89f": [], "test.desafioaeadw.unique_fct_salesorderdetail_salesorderdetailid.53d2cc6f6e": [], "test.desafioaeadw.not_null_fct_salesorderdetail_salesorderdetailid.de3d90fbfc": [], "test.desafioaeadw.not_null_fct_salesorderdetail_orderqty.12dec7c8bf": [], "test.desafioaeadw.not_null_fct_salesorderdetail_productid.efda273e68": [], "test.desafioaeadw.not_null_fct_salesorderdetail_unitprice.057c29563b": [], "test.desafioaeadw.not_null_fct_salesorderdetail_unitpricediscount.518a88604e": [], "test.desafioaeadw.not_null_fct_salesorderdetail_grossrevenue.7abc7eef52": [], "test.desafioaeadw.not_null_fct_salesorderdetail_discount.b1dbe799a8": [], "source.desafioaeadw.dbt_cintia.address": ["model.desafioaeadw.stg_address", "test.desafioaeadw.source_not_null_dbt_cintia_address_addressid.390d71e542", "test.desafioaeadw.source_unique_dbt_cintia_address_addressid.702f8eae55"], "source.desafioaeadw.dbt_cintia.countryregion": ["model.desafioaeadw.stg_countryregion", "test.desafioaeadw.source_not_null_dbt_cintia_countryregion_countryregioncode.3d94aeab6e", "test.desafioaeadw.source_unique_dbt_cintia_countryregion_countryregioncode.12dd7e57b9"], "source.desafioaeadw.dbt_cintia.creditcard": ["model.desafioaeadw.stg_creditcard", "test.desafioaeadw.source_not_null_dbt_cintia_creditcard_creditcardid.f016c94e52", "test.desafioaeadw.source_unique_dbt_cintia_creditcard_creditcardid.bdfd82db3b"], "source.desafioaeadw.dbt_cintia.customer": ["model.desafioaeadw.stg_customer", "test.desafioaeadw.source_not_null_dbt_cintia_customer_customerid.a9460e7b9a", "test.desafioaeadw.source_unique_dbt_cintia_customer_customerid.f24eac5df0", "test.desafioaeadw.source_unique_dbt_cintia_customer_personid.238a3e6a87"], "source.desafioaeadw.dbt_cintia.employee": ["model.desafioaeadw.stg_employee", "test.desafioaeadw.source_not_null_dbt_cintia_employee_businessentityid.d6bc521ace", "test.desafioaeadw.source_unique_dbt_cintia_employee_businessentityid.0340a127ea"], "source.desafioaeadw.dbt_cintia.person": ["model.desafioaeadw.stg_person", "test.desafioaeadw.source_not_null_dbt_cintia_person_businessentityid.cfc39e7537", "test.desafioaeadw.source_unique_dbt_cintia_person_businessentityid.4f8ba12edb"], "source.desafioaeadw.dbt_cintia.product": ["model.desafioaeadw.stg_product", "test.desafioaeadw.source_not_null_dbt_cintia_product_productid.c5cfbebb09", "test.desafioaeadw.source_unique_dbt_cintia_product_productid.d3a2ceaccc"], "source.desafioaeadw.dbt_cintia.productcategory": ["model.desafioaeadw.stg_productcategory", "test.desafioaeadw.source_not_null_dbt_cintia_productcategory_productcategoryid.9417f41460", "test.desafioaeadw.source_unique_dbt_cintia_productcategory_productcategoryid.6ce999c879"], "source.desafioaeadw.dbt_cintia.productsubcategory": ["model.desafioaeadw.stg_productsubcategory", "test.desafioaeadw.source_not_null_dbt_cintia_productsubcategory_productsubcategoryid.1ed6ae4159", "test.desafioaeadw.source_unique_dbt_cintia_productsubcategory_productsubcategoryid.db4c3d9cef"], "source.desafioaeadw.dbt_cintia.salesorderdetail": ["model.desafioaeadw.stg_salesorderdetail", "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderdetailid.9ce055e52e", "test.desafioaeadw.source_not_null_dbt_cintia_salesorderdetail_salesorderid.8225b6852e", "test.desafioaeadw.source_unique_dbt_cintia_salesorderdetail_salesorderdetailid.03df8d3a4e"], "source.desafioaeadw.dbt_cintia.salesorderheader": ["model.desafioaeadw.stg_salesorderheader", "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_customerid.f3869783df", "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheader_salesorderid.da27b2fc22", "test.desafioaeadw.source_unique_dbt_cintia_salesorderheader_salesorderid.e9d22a9dcb"], "source.desafioaeadw.dbt_cintia.salesorderheadersalesreason": ["model.desafioaeadw.stg_salesorderheadersalesreason", "test.desafioaeadw.source_not_null_dbt_cintia_salesorderheadersalesreason_salesorderid.a505bde384"], "source.desafioaeadw.dbt_cintia.salesperson": ["model.desafioaeadw.stg_salesperson", "test.desafioaeadw.source_not_null_dbt_cintia_salesperson_businessentityid.b433d7ef88", "test.desafioaeadw.source_unique_dbt_cintia_salesperson_businessentityid.d447e41aa4"], "source.desafioaeadw.dbt_cintia.salesreason": ["model.desafioaeadw.stg_salesreason", "test.desafioaeadw.source_not_null_dbt_cintia_salesreason_salesreasonid.c425b95d75", "test.desafioaeadw.source_unique_dbt_cintia_salesreason_salesreasonid.6b2b3f6489"], "source.desafioaeadw.dbt_cintia.stateprovince": ["model.desafioaeadw.stg_stateprovince", "test.desafioaeadw.source_not_null_dbt_cintia_stateprovince_stateprovinceid.522454b4a0", "test.desafioaeadw.source_unique_dbt_cintia_stateprovince_stateprovinceid.adbac1647e"], "source.desafioaeadw.dbt_cintia.store": ["model.desafioaeadw.stg_store", "test.desafioaeadw.source_not_null_dbt_cintia_store_businessentityid.f97b8a6adb", "test.desafioaeadw.source_unique_dbt_cintia_store_businessentityid.cea51aa654"]}}